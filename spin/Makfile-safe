all: spin.wasm.js pdta.wasm.js

clean: src/spin.c
	rm -f build/*

build/spin.ll: clean 
	clang src/spin.c -o build/spin.ll --target=wasm32 -emit-llvm -c -S 

build/spin.o: build/spin.ll
	llc -march=wasm32 -filetype=obj build/spin.ll -o build/spin.o

spin.wasm: build/spin.o
	wasm-ld --features=atomics,mutable-global --no-check-features --allow-undefined --import-memory --no-entry --export-all -o spin.wasm build/spin.o

spin.wasm.js: spin.wasm
	cat spin.wasm | npx encode-wasm-uint8 > spin.wasm.js

# sprun:
# 	clang \
#   	--target=wasm32 \
# 		-g \
#   	-Wl,--no-entry \
# 		-Wl,--allow-undefined \
#   	-Wl,--export-all src/sp_run.c -o - |npx encode-wasm-uint8 > run.wasm.js

pdta.wasm:
	clang \
  	--target=wasm32 \
	-nostdlib \
   	-Wl,--no-entry \
	-Wl,--export-all \
  	-Wl,--no-entry \
	-Wl,--allow-undefined \
	-Wl,--lto-O3 -o build/pdta.wasm \
	src/sf2.c
			


pdta.wasm.js: pdta.wasm 
	cat build/sf2.wasm | npx encode-wasm-uint8 > pdta.wasm.js
