; ModuleID = 'src/spin.c'
source_filename = "src/spin.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32"

%struct.spinner = type { ptr, ptr, i32, i32, i32, i32, i32, i32, float, float, ptr, ptr, ptr, ptr, ptr, i32 }
%struct.pcm_t = type { i32, i32, i32, i32, i32, ptr }
%struct.zone_t = type { i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, %struct.rangesType, %struct.rangesType, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16 }
%struct.rangesType = type { i8, i8 }
%struct.EG = type { float, float, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16 }
%struct.LFO = type { i16, i16, i16 }
%struct.LFOEffects = type { float, float, float }

@p2over1200 = hidden global [1201 x double] [double 1.000000e+00, double 0x3FF0025E13B18DAC, double 0x3FF004BC27631B58, double 0x3FF0071A3B14A904, double 0x3FF009795B35B0BC, double 0x3FF00BD87B56B873, double 0x3FF00E38A7E73A36, double 0x3FF01098D477BBF9, double 0x3FF012F901083DBC, double 0x3FF015592D98BF7F, double 0x3FF017BA6698BB4D, double 0x3FF01A1B9F98B71C, double 0x3FF01C7DE5082CF5, double 0x3FF01EDF1E0828C3, double 1.008120e+00, double 0x3FF023A4B5568E82, double 0x3FF0260807357E67, double 0x3FF0286B59146E4C, double 0x3FF02ACEAAF35E31, double 0x3FF02D330941C821, double 0x3FF02F9767903212, double 0x3FF031FCD24E160E, double 0x3FF034623D0BFA09, double 0x3FF036C7A7C9DE05, double 0x3FF0392D1287C201, double 0x3FF03B9389B52008, double 0x3FF03DFB0D51F81A, double 0x3FF04061847F5621, double 0x3FF042C9081C2E34, double 0x3FF045308BB90646, double 1.017480e+00, double 0x3FF04A01ABD1AA82, double 0x3FF04C6A3BDDFCA0, double 0x3FF04ED2CBEA4EBE, double 0x3FF0513C68661AE7, double 0x3FF053A71151611C, double 0x3FF05610ADCD2D45, double 0x3FF0587B56B87379, double 0x3FF05AE5FFA3B9AE, double 0x3FF05D51B4FE79EE, double 0x3FF05FBD6A593A2E, double 0x3FF062291FB3FA6E, double 0x3FF06495E17E34B9, double 0x3FF06702A3486F05, double 0x3FF0696F6512A950, double 0x3FF06BDD334C5DA7, double 0x3FF06E4B018611FD, double 1.027520e+00, double 0x3FF07327AA68F4B6, double 0x3FF0759685122318, double 0x3FF078055FBB517A, double 0x3FF07A7546D3F9E8, double 0x3FF07CE52DECA255, double 0x3FF07F5515054AC3, double 0x3FF081C6088D6D3B, double 0x3FF08436FC158FB4, double 0x3FF086A8FC0D2C38, double 0x3FF08919EF954EB1, double 1.034070e+00, double 0x3FF08DFEFBF401C5, double 0x3FF09072085B1855, double 0x3FF092E514C22EE4, double 0x3FF095592D98BF7F, double 1.037060e+00, double 1.037660e+00, double 0x3FF09CB5781C7150, double 0x3FF09F2A9D627BF6, double 0x3FF0A19FC2A8869C, double 1.040060e+00, double 0x3FF0A68C26139000, double 0x3FF0A90257C914B1, double 0x3FF0AB7995EE136E, double 0x3FF0ADF0D413122B, double 0x3FF0B068123810E9, double 0x3FF0B2E05CCC89B1, double 0x3FF0B558A7610279, double 0x3FF0B7D0F1F57B42, double 0x3FF0BA4A48F96E16, double 0x3FF0BCC39FFD60E9, double 0x3FF0BF3CF70153BD, double 0x3FF0C1B75A74C09C, double 0x3FF0C431BDE82D7B, double 0x3FF0C6AD2DCB1466, double 0x3FF0C9289DADFB50, double 0x3FF0CBA40D90E23B, double 0x3FF0CE1F7D73C925, double 1.050930e+00, double 0x3FF0D31876188B11, double 0x3FF0D595FEDA6613, double 0x3FF0D813879C4114, double 0x3FF0DA91105E1C15, double 1.053970e+00, double 0x3FF0DF8E3AC0C62E, double 0x3FF0E20CCFF21B3B, double 0x3FF0E48C7192EA53, double 0x3FF0E70C1333B96B, double 0x3FF0E98BB4D48883, double 0x3FF0EC0C62E4D1A6, double 1.058240e+00, double 0x3FF0F10DBF0563ED, double 0x3FF0F38F7985271C, double 0x3FF0F6113404EA4B, double 0x3FF0F893FAF42785, double 0x3FF0FB16C1E364BF, double 0x3FF0FD9988D2A1F9, double 0x3FF1001C4FC1DF33, double 0x3FF102A023209678, double 0x3FF1052502EEC7C9, double 1.064370e+00, double 0x3FF10A2DB61BB060, double 0x3FF10CB3A2595BBC, double 0x3FF10F3882278D0D, double 0x3FF111BE6E653869, double 0x3FF1144567125DD1, double 0x3FF116CB5350092D, double 0x3FF11953586CA8A0, double 1.069300e+00, double 0x3FF11E6256366D7A, double 0x3FF120EA5B530CED, double 0x3FF123736CDF266C, double 0x3FF125FB71FBC5DF, double 0x3FF128858FF75968, double 0x3FF12B0EA18372E7, double 0x3FF12D98BF7F0670, double 0x3FF13023E9EA1405, double 0x3FF132AE07E5A78F, double 0x3FF135393250B524, double 0x3FF137C5692B3CC5, double 0x3FF13A51A005C465, double 1.077360e+00, double 0x3FF13F6A0DBAD3A6, double 0x3FF141F75104D552, double 0x3FF14484944ED6FE, double 0x3FF14712E40852B5, double 0x3FF149A133C1CE6C, double 1.081100e+00, double 0x3FF14EBEDFA43FE6, double 1.082350e+00, double 0x3FF153DD97F62B6B, double 0x3FF1566E008E9B39, double 0x3FF158FE69270B07, double 0x3FF15B8ED1BF7AD5, double 1.085480e+00, double 0x3FF160B1BBCF4E87, double 0x3FF163443D46B26C, double 0x3FF165D6BEBE1651, double 0x3FF1686940357A35, double 1.088620e+00, double 0x3FF16D905C033615, double 0x3FF17023E9EA1405, double 0x3FF172B884406C01, double 0x3FF1754D1E96C3FC, double 0x3FF177E1B8ED1BF8, double 0x3FF17A775FB2EDFE, double 1.093030e+00, double 0x3FF17FA3B9AE0C17, double 0x3FF1823A6CE3582A, double 0x3FF184D12018A43C, double 0x3FF18768DFBD6A59, double 0x3FF18A009F623077, double 0x3FF18C985F06F694, double 0x3FF18F312B1B36BD, double 0x3FF191C9F72F76E6, double 0x3FF19462C343B70F, double 0x3FF196FC9BC77143, double 0x3FF19996744B2B77, double 0x3FF19C31593E5FB7, double 0x3FF19ECC3E3193F7, double 0x3FF1A1672324C836, double 0x3FF1A40314877681, double 0x3FF1A69F05EA24CC, double 0x3FF1A93AF74CD317, double 0x3FF1ABD7F51EFB6E, double 0x3FF1AE74F2F123C4, double 0x3FF1B112FD32C626, double 1.106370e+00, double 0x3FF1B64F11B60AE9, double 0x3FF1B8ED1BF7AD4B, double 0x3FF1BB8C32A8C9B8, double 0x3FF1BE2C55C96031, double 0x3FF1C0CB6C7A7C9E, double 0x3FF1C36C9C0A8D22, double 0x3FF1C60CBF2B239A, double 0x3FF1C8ADEEBB341E, double 0x3FF1CB4F1E4B44A2, double 0x3FF1CDF15A4ACF31, double 0x3FF1D093964A59C0, double 0x3FF1D335D249E450, double 0x3FF1D5D91AB8E8EA, double 0x3FF1D87C6327ED85, double 0x3FF1DB1FAB96F21F, double 0x3FF1DDC4007570C5, double 0x3FF1E0685553EF6B, double 0x3FF1E30DB6A1E81D, double 0x3FF1E5B317EFE0CE, double 0x3FF1E858793DD97F, double 0x3FF1EAFEE6FB4C3C, double 0x3FF1EDA554B8BEF9, double 0x3FF1F04BC27631B6, double 0x3FF1F2F33CA31E7E, double 0x3FF1F59AB6D00B46, double 0x3FF1F8433D6C7219, double 1.123760e+00, double 0x3FF1FD944AA53FC0, double 0x3FF2003CD141A693, double 0x3FF202E770BD017E, double 0x3FF2059103C8E25D, double 1.127010e+00, double 0x3FF20AE642BF9831, double 0x3FF20D90E23AF31B, double 0x3FF2103C8E25C811, double 0x3FF212E946801712, double 0x3FF21594F26AEC07, double 0x3FF21841AAC53B08, double 0x3FF21AEF6F8F0414, double 1.132230e+00, double 0x3FF2204AF922962D, double 0x3FF222F8BDEC5F39, double 0x3FF225A78F25A251, double 0x3FF228576CCE5F74, double 0x3FF22B063E07A28C, double 0x3FF22DB7281FD9BA, double 0x3FF2306705C896DD, double 0x3FF23317EFE0CE0C, double 0x3FF235C8D9F9053A, double 0x3FF2387AD080B674, double 0x3FF23B2CC70867AE, double 0x3FF23DDEBD9018E7, double 0x3FF24091C087442C, double 0x3FF24344C37E6F72, double 0x3FF245F7C6759AB7, double 0x3FF248ABD5DC4007, double 0x3FF24B5FE542E558, double 0x3FF24E15011904B4, double 0x3FF250CA1CEF2410, double 0x3FF253804534BD77, double 0x3FF25635610ADCD3, double 1.146710e+00, double 0x3FF25BA2BE0589AD, double 0x3FF25E59F2BA9D1F, double 0x3FF26111276FB092, double 0x3FF263C968943E10, double 0x3FF26681A9B8CB8E, double 0x3FF2693AF74CD317, double 0x3FF26BF338716095, double 0x3FF26EAD9274E22A, double 0x3FF27166E008E9B4, double 0x3FF274213A0C6B48, double 0x3FF276DCA07F66E8, double 0x3FF2799806F26289, double 0x3FF27C536D655E29, double 1.156020e+00, double 0x3FF281CB46BACF74, double 0x3FF28488C60CBF2B, double 0x3FF2874538EF34D7, double 0x3FF28A02B841248D, double 0x3FF28CC144028E50, double 0x3FF28F7FCFC3F812, double 0x3FF2923E5B8561D4, double 0x3FF294FDF3B645A2, double 0x3FF297BD8BE7296F, double 0x3FF29A7D24180D3D, double 0x3FF29D3DC8B86B16, double 0x3FF29FFE6D58C8EF, double 0x3FF2A2C01E68A0D3, double 0x3FF2A581CF7878B8, double 1.166080e+00, double 0x3FF2AB063E07A28C, double 0x3FF2ADC8FB86F47B, double 0x3FF2B08BB906466B, double 0x3FF2B34F82F51266, double 0x3FF2B6145953586D, double 0x3FF2B8D823422468, double 0x3FF2BB9CF9A06A6E, double 0x3FF2BE62DC6E2A80, double 0x3FF2C128BF3BEA92, double 0x3FF2C3EEA209AAA4, double 0x3FF2C6B59146E4C1, double 0x3FF2C97C80841EDE, double 0x3FF2CC436FC158FB, double 0x3FF2CF0B6B6E0D24, double 0x3FF2D1D3671AC14C, double 0x3FF2D49C6F36EF80, double 0x3FF2D76577531DB4, double 0x3FF2DA2E7F6F4BE8, double 0x3FF2DCF893FAF428, double 0x3FF2DFC2A8869C67, double 0x3FF2E28DC981BEB2, double 0x3FF2E558EA7CE0FC, double 0x3FF2E8240B780347, double 0x3FF2EAF038E29F9D, double 0x3FF2EDBC664D3BF3, double 0x3FF2F08893B7D849, double 0x3FF2F355CD91EEAA, double 0x3FF2F62413DB7F17, double 0x3FF2F8F25A250F84, double 0x3FF2FBC0A06E9FF1, double 0x3FF2FE8EE6B8305E, double 0x3FF3015E39713AD6, double 1.188520e+00, double 0x3FF306FDEB52C9D1, double 0x3FF309CE4A7B4E55, double 0x3FF30C9FB6134CE4, double 1.191270e+00, double 0x3FF312428D434A02, double 0x3FF31515054AC29C, double 0x3FF317E77D523B36, double 0x3FF31AB9F559B3D0, double 0x3FF31D8D79D0A676, double 0x3FF32060FE47991C, double 0x3FF323358F2E05CD, double 0x3FF3260A2014727E, double 0x3FF328DFBD6A593A, double 0x3FF32BB55AC03FF7, double 0x3FF32E8AF81626B3, double 0x3FF33161A1DB877B, double 0x3FF334384BA0E842, double 0x3FF3370EF566490A, double 0x3FF339E6AB9B23DD, double 1.202330e+00, double 0x3FF33F972474538F, double 1.203720e+00, double 0x3FF34549B62C7757, double 0x3FF3482385404641, double 0x3FF34AFD5454152B, double 0x3FF34DD82FD75E20, double 0x3FF350B30B5AA716, double 0x3FF3538DE6DDF00B, double 0x3FF35669CED0B30B, double 0x3FF35945B6C3760C, double 0x3FF35C22AB25B318, double 0x3FF35EFF9F87F024, double 0x3FF361DDA059A73B, double 0x3FF364BBA12B5E53, double 0x3FF36799A1FD156A, double 0x3FF36A78AF3E468D, double 0x3FF36D57BC7F77AF, double 0x3FF37036C9C0A8D2, double 0x3FF37316E3715400, double 0x3FF375F80991793A, double 0x3FF378D92FB19E73, double 0x3FF37BBA55D1C3AD, double 1.218410e+00, double 0x3FF3817DAE81882B, double 0x3FF38460ED80A17B, double 0x3FF38743201040C0, double 0x3FF38A276B7ED41B, double 0x3FF38D0AAA7DED6C, double 1.222640e+00, double 0x3FF392D44DCA8E2E, double 0x3FF395B9A5A89B95, double 0x3FF3989EFD86A8FC, double 0x3FF39B845564B663, double 0x3FF39E6AB9B23DD5, double 0x3FF3A1522A6F3F53, double 0x3FF3A4399B2C40D1, double 0x3FF3A7210BE9424E, double 0x3FF3AA098915BDD7, double 0x3FF3ACF206423960, double 0x3FF3AFDA836EB4EA, double 0x3FF3B2C40D0AAA7E, double 0x3FF3B5AEA3161A1E, double 0x3FF3B899392189BE, double 1.233280e+00, double 0x3FF3BE6E653868FD, double 0x3FF3C15A07B352A8, double 0x3FF3C446B69DB65F, double 0x3FF3C7325918A00A, double 0x3FF3CA2014727DCC, double 0x3FF3CD0CC35CE182, double 0x3FF3CFFA7EB6BF44, double 0x3FF3D2E946801712, double 0x3FF3D5D80E496EDF, double 0x3FF3D8C6D612C6AC, double 0x3FF3DBB6AA4B9885, double 0x3FF3DEA67E846A5D, double 0x3FF3E19652BD3C36, double 0x3FF3E4873365881A, double 0x3FF3E779207D4E09, double 1.244730e+00, double 1.245450e+00, double 0x3FF3F04EE7C49FD8, double 0x3FF3F341E14BDFD2, double 1.247610e+00, double 0x3FF3F929ED3953DF, double 0x3FF3FC1DF3300DE5, double 0x3FF3FF13059641F6, double 0x3FF4020817FC7608, double 0x3FF404FD2A62AA19, double 0x3FF407F349385836, double 0x3FF40AE9680E0653, double 0x3FF40DE093532E7B, double 0x3FF410D7BE9856A3, double 0x3FF413CFF64CF8D7, double 0x3FF416C82E019B0B, double 0x3FF419C17225B74A, double 0x3FF41CB9A9DA597D, double 1.257740e+00, double 0x3FF422AD3E920C07, double 0x3FF425A89B951C5C, double 0x3FF428A2EC28B2A7, double 0x3FF42B9E492BC2FC, double 0x3FF42E99A62ED352, double 0x3FF431960FA15DB3, double 0x3FF434927913E814, double 0x3FF4378FEEF5EC81, double 0x3FF43A8D64D7F0ED, double 0x3FF43D8BE7296F65, double 0x3FF4408A697AEDDD, double 0x3FF44388EBCC6C55, double 1.267220e+00, double 0x3FF44988094E5D5B, double 0x3FF44C87980F55DE, double 0x3FF44F893FAF4278, double 0x3FF45289DADFB507, double 0x3FF4558B827FA1A1, double 0x3FF4588D2A1F8E3B, double 0x3FF45B8FDE2EF4E0, double 0x3FF45E92923E5B85, double 0x3FF4619652BD3C36, double 0x3FF4649A133C1CE7, double 0x3FF4679DD3BAFD97, double 0x3FF46AA2A0A95853, double 0x3FF46DA76D97B310, double 0x3FF470AD46F587D7, double 0x3FF473B320535C9E, double 0x3FF476BA0620AB71, double 0x3FF479C0EBEDFA44, double 0x3FF47CC7D1BB4917, double 0x3FF47FCFC3F811F5, double 0x3FF482D7B634DAD3, double 0x3FF485E0B4E11DBD, double 0x3FF488E9B38D60A6, double 0x3FF48BF2B239A390, double 0x3FF48EFCBD556085, double 0x3FF49207D4E09785, double 0x3FF49512EC6BCE85, double 0x3FF4981E03F70585, double 0x3FF49B2A27F1B691, double 0x3FF49E364BEC679D, double 1.289370e+00, double 0x3FF4A44FA05143BF, double 0x3FF4A75DDD2AE8E2, double 0x3FF4AA6C1A048E04, double 0x3FF4AD7A56DE3327, double 1.293100e+00, double 0x3FF4B398E9707182, double 0x3FF4B6A832B990B0, double 0x3FF4B9B8887229E9, double 0x3FF4BCC9EA9A3D2E, double 1.296840e+00, double 0x3FF4C2ECAEEA63B7, double 0x3FF4C5FF1D81F106, double 0x3FF4C9118C197E56, double 0x3FF4CC23FAB10BA6, double 1.300590e+00, double 0x3FF4D24BFD2E9468, double 0x3FF4D56084A515CF, double 0x3FF4D8750C1B9735, double 0x3FF4DB8AA00192A7, double 0x3FF4DEA033E78E19, double 0x3FF4E1B6D43D0397, double 1.305860e+00, double 0x3FF4E7E414E7EE91, double 0x3FF4EAFBC1ACDE1A, double 0x3FF4EE147AE147AE, double 1.308880e+00, double 0x3FF4F445ED4A1AD6, double 0x3FF4F75EA67E846A, double 0x3FF4FA797891E215, double 0x3FF4FD933E35C5B5, double 0x3FF500AE10492360, double 0x3FF503C9EECBFB16, double 0x3FF506E4C0DF58C1, double 0x3FF50A01ABD1AA82, double 0x3FF50D1E96C3FC44, double 0x3FF5103B81B64E05, double 0x3FF513586CA89FC7, double 0x3FF51676640A6B94, double 0x3FF5199567DBB16C, double 0x3FF51CB46BACF744, double 1.320270e+00, double 0x3FF522F37FBEFD00, double 0x3FF526138FFFBCE4, double 1.322560e+00, double 0x3FF52C55C96030C2, double 0x3FF52F77F27FE4BD, double 0x3FF5329A1B9F98B7, double 0x3FF535BC44BF4CB2, double 0x3FF538DF7A4E7AB7, double 0x3FF53C03BC4D22C9, double 0x3FF53F27FE4BCADA, double 0x3FF5424C404A72EB, double 0x3FF545718EB89507, double 0x3FF54896DD26B724, double 1.330990e+00, double 0x3FF54EE286727568, double 0x3FF55209EDBF8B9C, double 0x3FF55531550CA1CF, double 0x3FF55858BC59B802, double 1.334840e+00, double 0x3FF55EA9A3D2D880, double 0x3FF561D323FEE2CA, double 0x3FF564FCA42AED14, double 0x3FF5682730C67169, double 0x3FF56B51BD61F5BE, double 0x3FF56E7C49FD7A14, double 0x3FF571A7E3087875, double 0x3FF574D37C1376D5, double 0x3FF57800218DEF41, double 0x3FF57B2DD377E1B9, double 0x3FF57E5A78F25A25, double 0x3FF581882ADC4C9D, double 0x3FF584B6E935B91F, double 0x3FF587E5A78F25A2, double 0x3FF58B1572580C31, double 0x3FF58E453D20F2BF, double 0x3FF5917507E9D94D, double 0x3FF594A5DF2239E7, double 1.349570e+00, double 1.350350e+00, double 1.351130e+00, double 0x3FF5A16D6DC1A47B, double 0x3FF5A4A05DD8F92B, double 0x3FF5A7D45A5FC7E7, double 0x3FF5AB0856E696A2, double 0x3FF5AE3C536D655E, double 0x3FF5B1715C63AE25, double 0x3FF5B4A66559F6EC, double 0x3FF5B7DC7ABFB9BF, double 0x3FF5BB1290257C91, double 0x3FF5BE49B1FAB96F, double 0x3FF5C180D3CFF64D, double 0x3FF5C4B90214AD36, double 0x3FF5C7F13059641F, double 0x3FF5CB2A6B0D9514, double 0x3FF5CE63A5C1C609, double 0x3FF5D19CE075F6FD, double 0x3FF5D4D72799A1FD, double 0x3FF5D8116EBD4CFD, double 1.366040e+00, double 1.366830e+00, double 0x3FF5E1C475E6362A, double 0x3FF5E500D5E8D541, double 1.369200e+00, double 0x3FF5EB7BAECD0785, double 0x3FF5EEBA27AE9AB3, double 0x3FF5F1F8A0902DE0, double 0x3FF5F5371971C10D, double 1.373160e+00, double 0x3FF5FBB73083558A, double 0x3FF5FEF7C243DCCF, double 0x3FF6023854046413, double 0x3FF60579F2346562, double 0x3FF608BB906466B2, double 0x3FF60BFE3B03E20D, double 0x3FF60F40E5A35D68, double 1.379520e+00, double 0x3FF615C74751CE29, double 0x3FF6190C0AD03D9B, double 0x3FF61C50CE4EAD0C, double 0x3FF61F9591CD1C7E, double 1.383510e+00, double 1.384310e+00, double 0x3FF629680E065300, double 1.385910e+00, double 0x3FF62FF7DFA00E28, double 0x3FF6333FC86CEBBC, double 0x3FF63687B139C94F, double 0x3FF639D1B2E59AFA, double 0x3FF63D1AA821F299, double 0x3FF64064A9CDC444, double 0x3FF643AFB7E90FF9, double 0x3FF646FAC6045BAF, double 0x3FF64A45D41FA765, double 0x3FF64D91EEAA6D26, double 0x3FF650DF15A4ACF3, double 1.395550e+00, double 0x3FF6577963992C8C, double 0x3FF65AC79702E664, double 1.397970e+00, double 0x3FF661650A45D420, double 0x3FF664B44A1F0803, double 0x3FF668049667B5F2, double 0x3FF66B54E2B063E0, double 0x3FF66EA52EF911CF, double 0x3FF671F687B139C9, double 0x3FF67548ECD8DBCF, double 0x3FF6789B52007DD4, double 0x3FF67BEDB7281FDA, double 0x3FF67F4128BF3BEB, double 0x3FF68295A6C5D207, double 0x3FF685EA24CC6823, double 0x3FF6893EA2D2FE3F, double 0x3FF68C942D490E67, double 0x3FF68FE9B7BF1E8E, double 1.410950e+00, double 0x3FF69696E58A32F4, double 0x3FF699EE88DF3733, double 0x3FF69D462C343B71, double 0x3FF6A09EDBF8B9BB, double 0x3FF6A3F78BBD3804, double 0x3FF6A7503B81B64E, double 0x3FF6AAA9F7B5AEA3, double 0x3FF6AE04C0592104, double 0x3FF6B15F88FC9364, double 0x3FF6B4BA51A005C4, double 0x3FF6B81626B2F230, double 0x3FF6BB73083558A7, double 0x3FF6BECFE9B7BF1F, double 0x3FF6C22CCB3A2596, double 0x3FF6C58AB92C0618, double 1.424050e+00, double 0x3FF6CC47A17F4129, double 0x3FF6CFA69BE09BB7, double 1.426520e+00, double 0x3FF6D666A98244E9, double 0x3FF6D9C7BCC2938E, double 0x3FF6DD28D002E233, double 1.429820e+00, double 0x3FF6E3ED0F627393, double 0x3FF6E7503B81B64E, double 1.432300e+00, double 0x3FF6EE1693C03BC5, double 0x3FF6F17ACC4EF88C, double 0x3FF6F4E0114D2F5E, double 0x3FF6F845564B6630, double 0x3FF6FBAA9B499D02, double 0x3FF6FF10ECB74DE0, double 0x3FF702784A9478C8, double 0x3FF705DFA871A3B1, double 0x3FF70947064ECE9A, double 0x3FF70CAF709B738E, double 0x3FF71017DAE81883, double 0x3FF7138151A43782, double 0x3FF716EAC8605682, double 0x3FF71A554B8BEF8D, double 0x3FF71DBFCEB78898, double 0x3FF7212B5E529BAE, double 0x3FF72497FA5D28D0, double 0x3FF7280389F83BE6, double 0x3FF72B702602C908, double 0x3FF72EDDCE7CD035, double 0x3FF7324B76F6D762, double 0x3FF735BA2BE0589B, double 0x3FF73928E0C9D9D3, double 0x3FF73C98A222D517, double 0x3FF74008637BD05B, double 0x3FF74379314445AA, double 0x3FF746E9FF0CBAF9, double 0x3FF74A5ACCD53049, double 0x3FF74DCCA70D1FA3, double 0x3FF7513F8DB48909, double 0x3FF754B2745BF26F, double 1.459020e+00, double 0x3FF75B994E1A3F46, double 0x3FF75F0E4DA09CC3, double 0x3FF762834D26FA40, double 0x3FF765F84CAD57BC, double 1.463240e+00, double 0x3FF76CE5710880D8, double 0x3FF7705C896DD26B, double 0x3FF773D3A1D323FF, double 0x3FF7774BC6A7EF9E, double 0x3FF77AC3EB7CBB3D, double 1.468320e+00, double 0x3FF781B75A74C09C, double 0x3FF7853198288052, double 0x3FF788ABD5DC4007, double 0x3FF78C271FFF79C8, double 0x3FF78FA26A22B389, double 0x3FF7931EC0B56755, double 0x3FF7969B17481B22, double 0x3FF79A187A4A48F9, double 0x3FF79D95DD4C76D1, double 0x3FF7A1144CBE1EB4, double 0x3FF7A492BC2FC697, double 0x3FF7A8123810E886, double 0x3FF7AB92C061847F, double 0x3FF7AF123C42A66E, double 0x3FF7B293D102BC73, double 0x3FF7B6145953586D, double 1.482810e+00, double 0x3FF7BD188F42FE82, double 0x3FF7C09C3CE2089E, double 0x3FF7C41EDE1198AF, double 1.486240e+00, double 0x3FF7CB2745BF26F2, double 0x3FF7CEAD0C3D2524, double 0x3FF7D231C64BA94C, double 0x3FF7D5B78CC9A77E, double 0x3FF7D93E5FB71FBC, double 0x3FF7DCC532A497FA, double 0x3FF7E04D12018A44, double 0x3FF7E3D4F15E7C8D, double 0x3FF7E75DDD2AE8E2, double 0x3FF7EAE6C8F75537, double 0x3FF7EE70C1333B97, double 0x3FF7F1FAB96F21F7, double 0x3FF7F585BE1A8262, double 0x3FF7F910C2C5E2CE, double 0x3FF7FC9CD3E0BD45, double 0x3FF80028E4FB97BB, double 0x3FF803B60285EC3E, double 0x3FF80743201040C0, double 0x3FF80AD14A0A0F4D, double 0x3FF80E5F7403DDDB, double 0x3FF811EEAA6D2674, double 0x3FF8157DE0D66F0D, double 0x3FF8190D173FB7A6, double 0x3FF81C9E6687F456, double 0x3FF8202EA960B6FA, double 0x3FF823C105186DB5, double 1.509600e+00, double 0x3FF82AE5BC87DB2B, double 0x3FF82E78183F91E6, double 0x3FF8320C8CD63CB8, double 0x3FF8359FF4FD6D7F, double 0x3FF839357603925C, double 0x3FF83CC9EA9A3D2E, double 0x3FF84060780FDC16, double 0x3FF843F5F91600F3, double 0x3FF8478D92FB19E7, double 0x3FF84B242070B8D0, double 0x3FF84EBCC6C54BCF, double 1.520100e+00, double 0x3FF855EE136E71CE, double 0x3FF85987C6327ED8, double 0x3FF85D2178F68BE3, double 0x3FF860BC382A12F9, double 0x3FF86456F75D9A0F, double 0x3FF867F2C3009B30, double 0x3FF86B8E8EA39C52, double 0x3FF86F2B66B6177F, double 0x3FF872C83EC892AB, double 0x3FF87666234A87E4, double 1.529790e+00, double 0x3FF87DA4052D666B, double 0x3FF88142F61ED5AE, double 0x3FF884E2F37FBEFD, double 0x3FF88882F0E0A84C, double 0x3FF88C23FAB10BA6, double 0x3FF88FC610F0E90C, double 0x3FF893682730C671, double 0x3FF8970A3D70A3D7, double 0x3FF89AAD601FFB48, double 0x3FF89E518F3ECCC4, double 0x3FF8A1F5BE5D9E41, double 1.540430e+00, double 1.541320e+00, double 0x3FF8ACE5710880D8, double 0x3FF8B08BB906466B, double 0x3FF8B43201040BFE, double 0x3FF8B7DA61E0C5A8, double 0x3FF8BB81B64E0547, double 0x3FF8BF2A172ABEF0, double 0x3FF8C2D38476F2A6, double 0x3FF8C67CF1C3265B, double 0x3FF8CA276B7ED41B, double 0x3FF8CDD1E53A81DC, double 0x3FF8D17D6B65A9A8, double 0x3FF8D528F190D174, double 0x3FF8D8D5842B734B, double 0x3FF8DC8216C61523, double 0x3FF8E02FB5D03105, double 0x3FF8E3DD54DA4CE8, double 1.556530e+00, double 0x3FF8EB3AABCD78C4, double 0x3FF8EEEA63B688BE, double 1.559230e+00, double 1.560130e+00, double 0x3FF8F9FCB0C026CC, double 0x3FF8FDAE81882ADC, double 0x3FF9016052502EEC, double 0x3FF905132F87AD08, double 0x3FF908C7192EA52F, double 0x3FF90C7B02D59D56, double 0x3FF9102EEC7C957D, double 0x3FF913E3E29307AF, double 0x3FF91799E518F3ED, double 0x3FF91B4FE79EE02A, double 0x3FF91F06F6944674, double 0x3FF922BE0589ACBD, double 1.571890e+00, double 0x3FF92A2E3C536D65, double 0x3FF92DE76427C7C5, double 0x3FF931A08BFC2225, double 0x3FF9355AC03FF690, double 0x3FF93914F483CAFB, double 0x3FF93CD035371972, double 0x3FF9408B75EA67E8, double 1.579170e+00, double 0x3FF948051C9F72F7, double 0x3FF94BC27631B585, double 0x3FF94F7FCFC3F812, double 0x3FF9533E35C5B4AB, double 0x3FF956FDA836EB4F, double 0x3FF95ABD1AA821F3, double 0x3FF95E7C8D195897, double 0x3FF9623D0BFA0946, double 0x3FF965FE974A3401, double 0x3FF969C0229A5EBB, double 0x3FF96D82BA5A0382, double 0x3FF971455219A848, double 0x3FF97508F648C719, double 0x3FF978CC9A77E5EB, double 0x3FF97C914B167EC8, double 0x3FF98055FBB517A4, double 0x3FF9841BB8C32A8D, double 0x3FF987E28240B780, double 0x3FF98BA94BBE4474, double 0x3FF98F70153BD167, double 0x3FF99337EB28D866, double 0x3FF99700CD855971, double 1.600290e+00, double 0x3FF99E939EADD591, double 1.602140e+00, double 0x3FF9A6277C45CBBC, double 0x3FF9A9F383F0BAE9, double 0x3FF9ADBE7F2C300A, double 0x3FF9B18B93469942, double 0x3FF9B558A7610279, double 0x3FF9B925BB7B6BB1, double 0x3FF9BCF3DC054EF4, double 1.609560e+00, double 1.610490e+00, double 0x3FF9C86162F166E0, double 0x3FF9CC319C5A3E3A, double 0x3FF9D002E2328F9F, double 0x3FF9D3D4280AE105, double 0x3FF9D7A56DE3326A, double 0x3FF9DB78CC9A77E6, double 0x3FF9DF4B1EE24357, double 1.617950e+00, double 0x3FF9E6F2E8C0485A, double 1.619820e+00, double 0x3FF9EE9DD7ECBB80, double 0x3FF9F2734F82F512, double 0x3FF9F649D388A8B1, double 0x3FF9FA2163FDD65A, double 0x3FF9FDF8F4730404, double 0x3FFA01D084E831AD, double 0x3FFA05AA2E3C536D, double 0x3FFA0982CB20FB22, double 0x3FFA0D5D80E496EE, double 0x3FFA11372A38B8AE, double 0x3FFA1512EC6BCE85, double 0x3FFA18EEAE9EE45C, double 0x3FFA1CCA70D1FA33, double 0x3FFA20A73F748A16, double 0x3FFA24840E1719F8, double 0x3FFA2861E92923E6, double 0x3FFA2C40D0AAA7DF, double 0x3FFA301FB82C2BD8, double 0x3FFA33FFAC1D29DC, double 0x3FFA37DFA00E27E1, double 0x3FFA3BC0A06E9FF1, double 0x3FFA3FA1A0CF1801, double 0x3FFA4383AD9F0A1C, double 0x3FFA4766C6DE7642, double 0x3FFA4B49E01DE269, double 1.644330e+00, double 1.645280e+00, double 0x3FFA56F6512A94FF, double 0x3FFA5ADB8348F53C, double 0x3FFA5EC1C1D6CF85, double 0x3FFA62A80064A9CE, double 0x3FFA668F4B61FE22, double 0x3FFA6A76965F5276, double 0x3FFA6E5EEDCC20D5, double 0x3FFA724851A86940, double 0x3FFA7631B584B1AB, double 0x3FFA7A1B1960FA16, double 0x3FFA7E0589ACBC8C, double 0x3FFA81F10667F90E, double 0x3FFA85DC8323358F, double 0x3FFA89C90C4DEC1C, double 0x3FFA8DB59578A2A9, double 0x3FFA91A32B12D341, double 0x3FFA9591CD1C7DE5, double 0x3FFA99806F262889, double 0x3FFA9D6F112FD32C, double 0x3FFAA15EBFA8F7DB, double 0x3FFAA54F7A919696, double 0x3FFAA940357A3550, double 0x3FFAAD31FCD24E16, double 0x3FFAB124D099E0E7, double 0x3FFAB51697F1F9AD, double 0x3FFAB90A7829068A, double 0x3FFABCFE58601366, double 0x3FFAC0F238972043, double 0x3FFAC4E831AD2136, double 0x3FFAC8DD1E53A81E, double 0x3FFACCD31769A911, double 0x3FFAD0CA1CEF2410, double 0x3FFAD4C22EE4191A, double 0x3FFAD8BA40D90E24, double 0x3FFADCB252CE032E, double 0x3FFAE0AB71327243, double 0x3FFAE4A59C065B64, double 0x3FFAE89FC6DA4485, double 0x3FFAEC9AFE1DA7B1, double 0x3FFAF09635610ADD, double 1.684710e+00, double 0x3FFAF88EBCC6C54C, double 0x3FFAFC8C0CE91C8F, double 0x3FFB008A697AEDDD, double 0x3FFB0488C60CBF2B, double 0x3FFB0887229E9079, double 0x3FFB0C87980F55DE, double 0x3FFB10870110A138, double 0x3FFB148882F0E0A8, double 0x3FFB188A04D12019, double 0x3FFB1C8B86B15F89, double 0x3FFB208E15011905, double 0x3FFB2491AFC04C8C, double 0x3FFB28954A7F8013, double 0x3FFB2C99F1AE2DA5, double 1.699370e+00, double 0x3FFB34A44C7B02D6, double 0x3FFB38AA00192A73, double 0x3FFB3CB0C026CC1D, double 0x3FFB40B88CA3E7D1, double 0x3FFB44C059210386, double 1.705270e+00, double 0x3FFB4CD20AFA2F06, double 0x3FFB50DBF0563ED1, double 0x3FFB54E5D5B24E9C, double 0x3FFB58F0C77DD873, double 0x3FFB5CFCC5B8DC55, double 1.711190e+00, double 0x3FFB6515CE9E5E24, double 0x3FFB6922D948DC12, double 0x3FFB6D30F062D40B, double 0x3FFB713F077CCC03, double 0x3FFB754E2B063E08, double 0x3FFB795E5AFF2A17, double 0x3FFB7D6E8AF81627, double 0x3FFB817FC7607C42, double 0x3FFB859103C8E25D, double 0x3FFB89A34CA0C283, double 0x3FFB8DB59578A2A9, double 0x3FFB91C8EABFFCDB, double 0x3FFB95DD4C76D118, double 0x3FFB99F1AE2DA555, double 0x3FFB9E071C53F39D, double 0x3FFBA21C8A7A41E5, double 0x3FFBA63305100A39, double 0x3FFBAA497FA5D28D, double 0x3FFBAE62131A8EF7, double 0x3FFBB2799A1FD157, double 0x3FFBB6922D948DC1, double 0x3FFBBAABCD78C437, double 0x3FFBBEC56D5CFAAD, double 0x3FFBC2E019B0AB2E, double 1.736080e+00, double 0x3FFBCB178B370047, double 0x3FFBCF345069A4DF, double 0x3FFBD351159C4977, double 0x3FFBD76EE73E681B, double 0x3FFBDB8CB8E086BE, double 0x3FFBDFAB96F21F6D, double 0x3FFBE3CB81733227, double 0x3FFBE7EB6BF444E1, double 0x3FFBEC0C62E4D1A6, double 0x3FFBF02D59D55E6C, double 0x3FFBF44F5D35653D, double 0x3FFBF87160956C0D, double 0x3FFBFC947064ECEA, double 0x3FFC00B88CA3E7D1, double 0x3FFC04DCA8E2E2B9, double 0x3FFC0901D19157AC, double 0x3FFC0D26FA3FCC9F, double 0x3FFC114D2F5DBB9D, double 0x3FFC157470EB24A7, double 0x3FFC199BB2788DB0, double 0x3FFC1DC4007570C5, double 0x3FFC21EC4E7253DA, double 0x3FFC2615A8DEB0FB, double 0x3FFC2A400FBA8827, double 0x3FFC2E6A76965F52, double 0x3FFC3294DD72367E, double 0x3FFC36C15D2D01C1, double 0x3FFC3AEDDCE7CD03, double 0x3FFC3F1A5CA29846, double 0x3FFC4347E8CCDD94, double 0x3FFC477681669CED, double 0x3FFC4BA51A005C46, double 1.769490e+00, double 0x3FFC54046412CF10, double 0x3FFC5835158B8280, double 0x3FFC5C66D373AFFB, double 0x3FFC6098915BDD76, double 0x3FFC64CB5BB384FD, double 0x3FFC68FE260B2C84, double 0x3FFC6D31FCD24E16, double 0x3FFC7165D3996FA8, double 0x3FFC759AB6D00B46, double 1.779740e+00, double 0x3FFC7E07A28BB0A3, double 0x3FFC823D9231C64C, double 0x3FFC86759AB6D00B, double 0x3FFC8AADA33BD9CB, double 0x3FFC8EE6B8305D96, double 0x3FFC931FCD24E161, double 0x3FFC9759EE88DF37, double 0x3FFC9B940FECDD0E, double 0x3FFC9FCF3DC054EF, double 1.790050e+00, double 0x3FFCA847B24638C9, double 0x3FFCAC84F8F8A4C2, double 0x3FFCB0C34C1A8AC6, double 0x3FFCB5019F3C70CA, double 0x3FFCB940FECDD0D9, double 0x3FFCBD805E5F30E8, double 0x3FFCC1C0CA600B03, double 0x3FFCC6013660E51D, double 1.799380e+00, double 1.800420e+00, double 1.801460e+00, double 0x3FFCD70B49E01DE2, double 0x3FFCDB4EDB2F661F, double 0x3FFCDF9378EE2867, double 0x3FFCE3D9231C64BB, double 1.806670e+00, double 0x3FFCEC6583E8576D, double 0x3FFCF0AD46F587D7, double 0x3FFCF4F50A02B841, double 1.810850e+00, double 0x3FFCFD86A8FC0D2C, double 0x3FFD01D084E831AD, double 1.813990e+00, double 0x3FFD0A65492FF4BA, double 0x3FFD0EB13DFB0D52, double 0x3FFD12FD32C625EA, double 0x3FFD174A3400B88D, double 0x3FFD1B9841AAC53B, double 0x3FFD1FE64F54D1E9, double 1.821340e+00, double 0x3FFD28848387DF5D, double 0x3FFD2CD4AA10E022, double 0x3FFD3125DD095AF3, double 0x3FFD35771001D5C3, double 0x3FFD39C94F69CA9F, double 0x3FFD3E1B8ED1BF7B, double 0x3FFD426EDAA92E62, double 0x3FFD46C332F01755, double 0x3FFD4B178B370047, double 0x3FFD4F6CEFED6345, double 0x3FFD53C254A3C643, double 0x3FFD5818C5C9A34D, double 0x3FFD5C70435EFA61, double 0x3FFD60C7C0F45176, double 0x3FFD65204AF92296, double 1.838250e+00, double 0x3FFD6DD377E1B8ED, double 0x3FFD722D0E560419, double 0x3FFD7688BDA9435B, double 0x3FFD7AE46CFC829D, double 0x3FFD7F401C4FC1DF, double 0x3FFD839CD8127B2D, double 0x3FFD87FAA044AE86, double 0x3FFD8C5974E65BEA, double 0x3FFD90B84988094E, double 0x3FFD95171E29B6B3, double 0x3FFD99780BAA582E, double 0x3FFD9DD7ECBB7F9D, double 0x3FFDA239E6AB9B24, double 0x3FFDA69BE09BB6AA, double 0x3FFDAAFEE6FB4C3C, double 0x3FFDAF61ED5AE1CE, double 1.856390e+00, double 0x3FFDB82B1F687B14, double 0x3FFDBC903EA704BC, double 1.859610e+00, double 0x3FFDC55C96030C24, double 0x3FFDC9C3CE2089E3, double 0x3FFDCE2C12AD81AE, double 0x3FFDD294573A7979, double 0x3FFDD6FDA836EB4F, double 0x3FFDDB6805A2D730, double 0x3FFDDFD2630EC311, double 0x3FFDE43DCCEA28FE, double 0x3FFDE8A936C58EEB, double 0x3FFDED15AD106EE3, double 0x3FFDF1832FCAC8E7, double 0x3FFDF5F0B28522EA, double 0x3FFDFA5F41AEF6F9, double 0x3FFDFECEDD484513, double 0x3FFE033E78E1932D, double 0x3FFE07AF20EA5B53, double 1.877960e+00, double 0x3FFE109289DADFB5, double 0x3FFE15043E5321E6, double 0x3FFE19780BAA582E, double 0x3FFE1DEACC92146A, double 0x3FFE225FA658C4BD, double 1.884480e+00, double 0x3FFE2B4A66559F6F, double 0x3FFE2FC158FB43D9, double 0x3FFE34384BA0E842, double 0x3FFE38AF3E468CAC, double 0x3FFE3D2849CB252D, double 0x3FFE41A1554FBDAD, double 0x3FFE461A60D4562E, double 0x3FFE4A958537E2C5, double 0x3FFE4F0F9D2BF551, double 0x3FFE538BCDFEFBF4, double 0x3FFE5807FED20297, double 0x3FFE5C853C148345, double 0x3FFE6102795703F3, double 0x3FFE6580C308FEAC, double 0x3FFE6A00192A7371, double 0x3FFE6E7F6F4BE836, double 0x3FFE72FFD1DCD706, double 0x3FFE778140DD3FE2, double 0x3FFE7C02AFDDA8BD, double 0x3FFE80852B4D8BA4, double 0x3FFE8507A6BD6E8B, double 1.908580e+00, double 0x3FFE8E0FC2EBA27B, double 0x3FFE929563A9F384, double 0x3FFE971B0468448D, double 0x3FFE9BA0A5269596, double 0x3FFEA0285EC3DAB6, double 0x3FFEA4B018611FD6, double 0x3FFEA937D1FE64F5, double 1.917420e+00, double 0x3FFEB24A6A875D57, double 0x3FFEB6D549731099, double 0x3FFEBB60285EC3DB, double 0x3FFEBFEC13B9F128, double 0x3FFEC477FF151E75, double 0x3FFEC904F6DFC5CE, double 0x3FFECD92FB19E732, double 0x3FFED220FF540896, double 0x3FFED6B00FFDA405, double 0x3FFEDB402D16B980, double 0x3FFEDFD04A2FCEFB, double 0x3FFEE46173B85E81, double 0x3FFEE8F3A9B06812, double 0x3FFEED85DFA871A4, double 0x3FFEF219220FF541, double 0x3FFEF6AC647778DD, double 0x3FFEFB40B34E7686, double 1.937460e+00, double 1.938580e+00, double 1.939700e+00, double 1.940820e+00, double 0x3FFF1231C64BA94C, double 0x3FFF16CA46E08F21, double 0x3FFF1B63D3E4EF03, double 1.945310e+00, double 0x3FFF2497FA5D28D0, double 0x3FFF293293D102BC, double 0x3FFF2DCF4623D0C0, double 1.949810e+00, double 0x3FFF3708AAC96CC6, double 0x3FFF3BA6698BB4D5, double 0x3FFF404534BD76EE, double 1.954320e+00, double 0x3FFF4984E3FFEF39, double 0x3FFF4E25C810A56A, double 0x3FFF52C6AC215B9A, double 0x3FFF5769A91105E2, double 0x3FFF5C0B9991361E, double 0x3FFF60AFA2F05A71, double 0x3FFF6553AC4F7EC3, double 0x3FFF69F8C21E1D21, double 0x3FFF6E9DD7ECBB80, double 0x3FFF7343FA2AD3E9, double 0x3FFF77EB28D8665E, double 0x3FFF7C925785F8D3, double 1.969050e+00, double 0x3FFF85E3DA2F8BDF, double 0x3FFF8A8D21BC126A, double 0x3FFF8F3775B81301, double 0x3FFF93E2D6238DA4, double 0x3FFF988E368F0846, double 0x3FFF9D3AA369FCF4, double 0x3FFFA1E81CB46BAD, double 1.978170e+00, double 0x3FFFAB441BB8C32B, double 0x3FFFAFF3ADE225FA, double 0x3FFFB4A3400B88CA, double 0x3FFFB953DEA465A5, double 0x3FFFBE0589ACBC8C, double 0x3FFFC2B734B51373, double 0x3FFFC769EC2CE465, double 0x3FFFCC1DB0142F62, double 0x3FFFD0D173FB7A5F, double 1.989630e+00, double 0x3FFFDA3B14A90471, double 1.991930e+00, double 0x3FFFE3A8E71476B0, double 0x3FFFE85FD04A2FCF, double 0x3FFFED17C5EF62FA, double 0x3FFFF1D0C8041030, double 0x3FFFF68AD6883772, double 0x3FFFFB44E50C5EB3, double 2.000000e+00], align 16
@p10over200 = hidden global [1441 x double] [double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 0x3EB0C6F7A0B5ED8D, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 2.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 3.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 4.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 5.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 6.000000e-06, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EDD5C31593E5FB7, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 0x3EE0C6F7A0B5ED8D, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 9.000000e-06, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.000000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.100000e-05, double 1.200000e-05, double 1.200000e-05, double 1.200000e-05, double 1.200000e-05, double 1.200000e-05, double 1.200000e-05, double 1.200000e-05, double 1.300000e-05, double 1.300000e-05, double 1.300000e-05, double 1.300000e-05, double 1.300000e-05, double 1.300000e-05, double 1.300000e-05, double 1.400000e-05, double 1.400000e-05, double 1.400000e-05, double 1.400000e-05, double 1.400000e-05, double 1.400000e-05, double 1.500000e-05, double 1.500000e-05, double 1.500000e-05, double 1.500000e-05, double 1.500000e-05, double 1.500000e-05, double 1.600000e-05, double 1.600000e-05, double 1.600000e-05, double 1.600000e-05, double 1.600000e-05, double 1.700000e-05, double 1.700000e-05, double 1.700000e-05, double 1.700000e-05, double 1.700000e-05, double 1.800000e-05, double 1.800000e-05, double 1.800000e-05, double 1.800000e-05, double 1.800000e-05, double 1.900000e-05, double 1.900000e-05, double 1.900000e-05, double 1.900000e-05, double 1.900000e-05, double 2.000000e-05, double 2.000000e-05, double 2.000000e-05, double 2.000000e-05, double 2.100000e-05, double 2.100000e-05, double 2.100000e-05, double 2.100000e-05, double 2.200000e-05, double 2.200000e-05, double 2.200000e-05, double 2.200000e-05, double 2.300000e-05, double 2.300000e-05, double 2.300000e-05, double 2.300000e-05, double 2.400000e-05, double 2.400000e-05, double 2.400000e-05, double 2.500000e-05, double 2.500000e-05, double 2.500000e-05, double 2.500000e-05, double 2.600000e-05, double 2.600000e-05, double 2.600000e-05, double 2.700000e-05, double 2.700000e-05, double 2.700000e-05, double 2.800000e-05, double 2.800000e-05, double 2.800000e-05, double 2.900000e-05, double 2.900000e-05, double 2.900000e-05, double 3.000000e-05, double 3.000000e-05, double 3.000000e-05, double 3.100000e-05, double 3.100000e-05, double 3.100000e-05, double 3.200000e-05, double 3.200000e-05, double 3.200000e-05, double 3.300000e-05, double 3.300000e-05, double 3.300000e-05, double 3.400000e-05, double 3.400000e-05, double 3.500000e-05, double 3.500000e-05, double 3.500000e-05, double 3.600000e-05, double 3.600000e-05, double 3.700000e-05, double 3.700000e-05, double 3.800000e-05, double 3.800000e-05, double 3.800000e-05, double 3.900000e-05, double 3.900000e-05, double 4.000000e-05, double 4.000000e-05, double 4.100000e-05, double 4.100000e-05, double 4.200000e-05, double 4.200000e-05, double 4.300000e-05, double 4.300000e-05, double 4.400000e-05, double 4.400000e-05, double 4.500000e-05, double 4.500000e-05, double 4.600000e-05, double 4.600000e-05, double 4.700000e-05, double 4.700000e-05, double 4.800000e-05, double 4.800000e-05, double 4.900000e-05, double 5.000000e-05, double 5.000000e-05, double 5.100000e-05, double 5.100000e-05, double 5.200000e-05, double 5.200000e-05, double 5.300000e-05, double 5.400000e-05, double 5.400000e-05, double 5.500000e-05, double 5.600000e-05, double 5.600000e-05, double 5.700000e-05, double 5.800000e-05, double 5.800000e-05, double 5.900000e-05, double 6.000000e-05, double 6.000000e-05, double 6.100000e-05, double 6.200000e-05, double 6.200000e-05, double 6.300000e-05, double 6.400000e-05, double 6.500000e-05, double 6.500000e-05, double 6.600000e-05, double 6.700000e-05, double 0x3F11D3671AC14C66, double 0x3F11D3671AC14C66, double 6.900000e-05, double 0x3F12599ED7C6FBD2, double 7.100000e-05, double 7.200000e-05, double 7.200000e-05, double 7.300000e-05, double 7.400000e-05, double 7.500000e-05, double 7.600000e-05, double 7.700000e-05, double 7.800000e-05, double 0x3F14B599AA60913A, double 0x3F14B599AA60913A, double 8.000000e-05, double 8.100000e-05, double 8.200000e-05, double 8.300000e-05, double 8.400000e-05, double 8.500000e-05, double 8.600000e-05, double 8.700000e-05, double 0x3F1711947CFA26A2, double 8.900000e-05, double 9.000000e-05, double 9.100000e-05, double 9.200000e-05, double 9.300000e-05, double 9.400000e-05, double 9.500000e-05, double 0x3F196D8F4F93BC0A, double 9.800000e-05, double 0x3F19F3C70C996B76, double 1.000000e-04, double 1.010000e-04, double 1.020000e-04, double 1.040000e-04, double 1.050000e-04, double 1.060000e-04, double 1.070000e-04, double 1.080000e-04, double 1.100000e-04, double 1.110000e-04, double 1.120000e-04, double 1.140000e-04, double 1.150000e-04, double 1.160000e-04, double 1.170000e-04, double 1.190000e-04, double 1.200000e-04, double 1.220000e-04, double 1.230000e-04, double 1.240000e-04, double 1.260000e-04, double 1.270000e-04, double 1.290000e-04, double 1.300000e-04, double 1.320000e-04, double 1.330000e-04, double 1.350000e-04, double 1.360000e-04, double 1.380000e-04, double 1.400000e-04, double 1.410000e-04, double 1.430000e-04, double 1.450000e-04, double 1.460000e-04, double 1.480000e-04, double 1.500000e-04, double 1.510000e-04, double 1.530000e-04, double 1.550000e-04, double 1.570000e-04, double 1.580000e-04, double 1.600000e-04, double 1.620000e-04, double 1.640000e-04, double 1.660000e-04, double 1.680000e-04, double 1.700000e-04, double 1.720000e-04, double 1.740000e-04, double 1.760000e-04, double 1.780000e-04, double 1.800000e-04, double 1.820000e-04, double 1.840000e-04, double 1.860000e-04, double 1.880000e-04, double 1.910000e-04, double 1.930000e-04, double 1.950000e-04, double 1.970000e-04, double 2.000000e-04, double 2.020000e-04, double 2.040000e-04, double 2.070000e-04, double 2.090000e-04, double 2.110000e-04, double 2.140000e-04, double 2.160000e-04, double 2.190000e-04, double 2.210000e-04, double 2.240000e-04, double 2.260000e-04, double 2.290000e-04, double 2.320000e-04, double 2.340000e-04, double 2.370000e-04, double 2.400000e-04, double 2.430000e-04, double 2.450000e-04, double 2.480000e-04, double 2.510000e-04, double 2.540000e-04, double 2.570000e-04, double 2.600000e-04, double 2.630000e-04, double 2.660000e-04, double 2.690000e-04, double 2.720000e-04, double 2.750000e-04, double 2.790000e-04, double 2.820000e-04, double 2.850000e-04, double 2.880000e-04, double 2.920000e-04, double 2.950000e-04, double 2.990000e-04, double 3.020000e-04, double 3.050000e-04, double 3.090000e-04, double 3.130000e-04, double 3.160000e-04, double 3.200000e-04, double 3.240000e-04, double 3.270000e-04, double 3.310000e-04, double 3.350000e-04, double 3.390000e-04, double 3.430000e-04, double 3.470000e-04, double 3.510000e-04, double 3.550000e-04, double 3.590000e-04, double 3.630000e-04, double 3.670000e-04, double 3.720000e-04, double 3.760000e-04, double 3.800000e-04, double 3.850000e-04, double 3.890000e-04, double 3.940000e-04, double 3.980000e-04, double 4.030000e-04, double 4.070000e-04, double 4.120000e-04, double 4.170000e-04, double 4.220000e-04, double 4.270000e-04, double 4.320000e-04, double 4.370000e-04, double 4.420000e-04, double 4.470000e-04, double 4.520000e-04, double 4.570000e-04, double 4.620000e-04, double 4.680000e-04, double 4.730000e-04, double 4.790000e-04, double 4.840000e-04, double 4.900000e-04, double 4.950000e-04, double 5.010000e-04, double 5.070000e-04, double 5.130000e-04, double 5.190000e-04, double 5.250000e-04, double 5.310000e-04, double 5.370000e-04, double 5.430000e-04, double 5.500000e-04, double 5.560000e-04, double 5.620000e-04, double 5.690000e-04, double 5.750000e-04, double 5.820000e-04, double 5.890000e-04, double 5.960000e-04, double 6.030000e-04, double 6.100000e-04, double 6.170000e-04, double 6.240000e-04, double 6.310000e-04, double 6.380000e-04, double 6.460000e-04, double 6.530000e-04, double 6.610000e-04, double 6.680000e-04, double 0x3F4626B2F23033A4, double 6.840000e-04, double 6.920000e-04, double 7.000000e-04, double 7.080000e-04, double 7.160000e-04, double 7.240000e-04, double 7.330000e-04, double 7.410000e-04, double 7.500000e-04, double 7.590000e-04, double 7.670000e-04, double 7.760000e-04, double 7.850000e-04, double 7.940000e-04, double 8.040000e-04, double 8.130000e-04, double 8.220000e-04, double 0x3F4B43526527A205, double 8.410000e-04, double 8.510000e-04, double 8.610000e-04, double 8.710000e-04, double 0x3F4CDE5D18090B41, double 0x3F4D323FEE2C98E5, double 9.020000e-04, double 9.120000e-04, double 9.230000e-04, double 9.330000e-04, double 0x3F4EEED8904F6DFC, double 9.550000e-04, double 0x3F4FA76534373F31, double 9.770000e-04, double 9.890000e-04, double 1.000000e-03, double 1.012000e-03, double 1.023000e-03, double 1.035000e-03, double 1.047000e-03, double 1.059000e-03, double 1.072000e-03, double 1.084000e-03, double 1.096000e-03, double 1.109000e-03, double 1.122000e-03, double 1.135000e-03, double 1.148000e-03, double 1.161000e-03, double 1.175000e-03, double 1.189000e-03, double 1.202000e-03, double 1.216000e-03, double 1.230000e-03, double 1.245000e-03, double 1.259000e-03, double 1.274000e-03, double 1.288000e-03, double 1.303000e-03, double 1.318000e-03, double 1.334000e-03, double 1.349000e-03, double 1.365000e-03, double 1.380000e-03, double 1.396000e-03, double 1.413000e-03, double 1.429000e-03, double 1.445000e-03, double 1.462000e-03, double 1.479000e-03, double 1.496000e-03, double 1.514000e-03, double 1.531000e-03, double 1.549000e-03, double 1.567000e-03, double 1.585000e-03, double 1.603000e-03, double 1.622000e-03, double 1.641000e-03, double 1.660000e-03, double 1.679000e-03, double 1.698000e-03, double 1.718000e-03, double 1.738000e-03, double 1.758000e-03, double 1.778000e-03, double 1.799000e-03, double 1.820000e-03, double 1.841000e-03, double 1.862000e-03, double 1.884000e-03, double 1.905000e-03, double 1.928000e-03, double 1.950000e-03, double 1.972000e-03, double 1.995000e-03, double 2.018000e-03, double 2.042000e-03, double 2.065000e-03, double 2.089000e-03, double 2.113000e-03, double 2.138000e-03, double 2.163000e-03, double 2.188000e-03, double 2.213000e-03, double 2.239000e-03, double 2.265000e-03, double 2.291000e-03, double 2.317000e-03, double 2.344000e-03, double 2.371000e-03, double 2.399000e-03, double 2.427000e-03, double 2.455000e-03, double 2.483000e-03, double 2.512000e-03, double 2.541000e-03, double 2.570000e-03, double 2.600000e-03, double 2.630000e-03, double 2.661000e-03, double 2.692000e-03, double 2.723000e-03, double 2.754000e-03, double 2.786000e-03, double 2.818000e-03, double 2.851000e-03, double 2.884000e-03, double 2.917000e-03, double 2.951000e-03, double 2.985000e-03, double 3.020000e-03, double 3.055000e-03, double 3.090000e-03, double 3.126000e-03, double 3.162000e-03, double 3.199000e-03, double 3.236000e-03, double 3.273000e-03, double 3.311000e-03, double 3.350000e-03, double 3.388000e-03, double 3.428000e-03, double 3.467000e-03, double 3.508000e-03, double 3.548000e-03, double 3.589000e-03, double 3.631000e-03, double 3.673000e-03, double 3.715000e-03, double 3.758000e-03, double 3.802000e-03, double 3.846000e-03, double 3.890000e-03, double 3.936000e-03, double 3.981000e-03, double 4.027000e-03, double 4.074000e-03, double 4.121000e-03, double 4.169000e-03, double 4.217000e-03, double 4.266000e-03, double 4.315000e-03, double 4.365000e-03, double 4.416000e-03, double 4.467000e-03, double 4.519000e-03, double 4.571000e-03, double 4.624000e-03, double 4.677000e-03, double 4.732000e-03, double 4.786000e-03, double 4.842000e-03, double 4.898000e-03, double 4.955000e-03, double 5.012000e-03, double 5.070000e-03, double 5.129000e-03, double 5.188000e-03, double 5.248000e-03, double 5.309000e-03, double 5.370000e-03, double 5.433000e-03, double 5.495000e-03, double 5.559000e-03, double 5.623000e-03, double 5.689000e-03, double 5.754000e-03, double 5.821000e-03, double 5.888000e-03, double 5.957000e-03, double 6.026000e-03, double 6.095000e-03, double 6.166000e-03, double 6.237000e-03, double 6.310000e-03, double 6.383000e-03, double 6.457000e-03, double 6.531000e-03, double 6.607000e-03, double 6.683000e-03, double 6.761000e-03, double 6.839000e-03, double 0x3F7C560C7C0F4517, double 0x3F7CA9EF5232D2BB, double 7.079000e-03, double 0x3F7D54DA4CE8101F, double 0x3F7DABE27179BFDF, double 7.328000e-03, double 7.413000e-03, double 0x3F7EB7457C0B1359, double 0x3F7F127F5E84F095, double 7.674000e-03, double 7.762000e-03, double 0x3F8014B599AA6091, double 7.943000e-03, double 8.035000e-03, double 8.128000e-03, double 8.222000e-03, double 8.318000e-03, double 0x3F813B5BF6A0DBAD, double 0x3F816E3715400325, double 0x3F81A21EA35935FC, double 8.710000e-03, double 8.810000e-03, double 8.913000e-03, double 9.016000e-03, double 9.120000e-03, double 0x3F82E514C22EE419, double 0x3F831D2E0E30446B, double 0x3F8355CD91EEAA6D, double 9.550000e-03, double 9.661000e-03, double 9.772000e-03, double 9.886000e-03, double 1.000000e-02, double 1.011600e-02, double 1.023300e-02, double 1.035100e-02, double 1.047100e-02, double 1.059300e-02, double 1.071500e-02, double 1.083900e-02, double 1.096500e-02, double 1.109200e-02, double 1.122000e-02, double 1.135000e-02, double 1.148200e-02, double 1.161400e-02, double 1.174900e-02, double 1.188500e-02, double 1.202300e-02, double 1.216200e-02, double 1.230300e-02, double 1.244500e-02, double 1.258900e-02, double 1.273500e-02, double 1.288200e-02, double 1.303200e-02, double 1.318300e-02, double 1.333500e-02, double 1.349000e-02, double 1.364600e-02, double 1.380400e-02, double 1.396400e-02, double 1.412500e-02, double 1.428900e-02, double 1.445400e-02, double 1.462200e-02, double 1.479100e-02, double 1.496200e-02, double 1.513600e-02, double 1.531100e-02, double 1.548800e-02, double 1.566800e-02, double 1.584900e-02, double 1.603200e-02, double 1.621800e-02, double 1.640600e-02, double 1.659600e-02, double 1.678800e-02, double 1.698200e-02, double 1.717900e-02, double 1.737800e-02, double 1.757900e-02, double 1.778300e-02, double 1.798900e-02, double 1.819700e-02, double 1.840800e-02, double 1.862100e-02, double 1.883600e-02, double 1.905500e-02, double 1.927500e-02, double 1.949800e-02, double 1.972400e-02, double 1.995300e-02, double 2.018400e-02, double 2.041700e-02, double 2.065400e-02, double 2.089300e-02, double 2.113500e-02, double 2.138000e-02, double 2.162700e-02, double 2.187800e-02, double 2.213100e-02, double 2.238700e-02, double 2.264600e-02, double 2.290900e-02, double 2.317400e-02, double 2.344200e-02, double 2.371400e-02, double 2.398800e-02, double 2.426600e-02, double 2.454700e-02, double 2.483100e-02, double 2.511900e-02, double 2.541000e-02, double 2.570400e-02, double 2.600200e-02, double 2.630300e-02, double 2.660700e-02, double 2.691500e-02, double 2.722700e-02, double 2.754200e-02, double 2.786100e-02, double 2.818400e-02, double 2.851000e-02, double 2.884000e-02, double 2.917400e-02, double 2.951200e-02, double 2.985400e-02, double 3.020000e-02, double 3.054900e-02, double 3.090300e-02, double 3.126100e-02, double 3.162300e-02, double 3.198900e-02, double 3.235900e-02, double 3.273400e-02, double 3.311300e-02, double 3.349700e-02, double 3.388400e-02, double 3.427700e-02, double 3.467400e-02, double 3.507500e-02, double 3.548100e-02, double 3.589200e-02, double 3.630800e-02, double 3.672800e-02, double 3.715400e-02, double 3.758400e-02, double 3.801900e-02, double 3.845900e-02, double 3.890500e-02, double 3.935500e-02, double 3.981100e-02, double 4.027200e-02, double 4.073800e-02, double 4.121000e-02, double 4.168700e-02, double 4.217000e-02, double 4.265800e-02, double 4.315200e-02, double 4.365200e-02, double 4.415700e-02, double 4.466800e-02, double 4.518600e-02, double 4.570900e-02, double 4.623800e-02, double 4.677400e-02, double 4.731500e-02, double 4.786300e-02, double 4.841700e-02, double 4.897800e-02, double 4.954500e-02, double 5.011900e-02, double 5.069900e-02, double 5.128600e-02, double 5.188000e-02, double 5.248100e-02, double 5.308800e-02, double 5.370300e-02, double 5.432500e-02, double 5.495400e-02, double 5.559000e-02, double 5.623400e-02, double 5.688500e-02, double 5.754400e-02, double 5.821000e-02, double 5.888400e-02, double 5.956600e-02, double 6.025600e-02, double 6.095400e-02, double 6.166000e-02, double 0x3FAFEF5A964E8B7E, double 0x3FB0270F3882278D, double 6.382600e-02, double 0x3FB08754F3775B81, double 0x3FB0B85A4F00EF13, double 6.606900e-02, double 6.683400e-02, double 6.760800e-02, double 0x3FB1821294573A79, double 6.918300e-02, double 6.998400e-02, double 7.079500e-02, double 0x3FB2554B8BEF8CEB, double 0x3FB28BB0A2CA9AC3, double 0x3FB2C29BF162AE4B, double 7.413100e-02, double 7.498900e-02, double 0x3FB36B6E0D23D4F1, double 0x3FB3A4F8726D04E6, double 7.762500e-02, double 0x3FB41A261BF37B8D, double 7.943300e-02, double 0x3FB49203A322AF57, double 0x3FB4CEF672B88440, double 8.222400e-02, double 0x3FB54B05B7CFE586, double 8.414000e-02, double 0x3FB5CA07F66E86C6, double 0x3FB60A958537E2C5, double 8.709600e-02, double 8.810500e-02, double 0x3FB6D0E560418937, double 9.015700e-02, double 9.120100e-02, double 9.225700e-02, double 9.332500e-02, double 9.440600e-02, double 9.549900e-02, double 0x3FB8BB1AF3A14CEC, double 9.772400e-02, double 0x3FB94E8FB00BCBE6, double 1.000000e-01, double 1.011580e-01, double 1.023290e-01, double 1.035140e-01, double 1.047130e-01, double 1.059250e-01, double 1.071520e-01, double 1.083930e-01, double 1.096480e-01, double 1.109170e-01, double 1.122020e-01, double 1.135010e-01, double 1.148150e-01, double 1.161450e-01, double 1.174900e-01, double 1.188500e-01, double 1.202260e-01, double 1.216190e-01, double 1.230270e-01, double 1.244510e-01, double 1.258930e-01, double 1.273500e-01, double 1.288250e-01, double 1.303170e-01, double 1.318260e-01, double 1.333520e-01, double 1.348960e-01, double 1.364580e-01, double 1.380380e-01, double 1.396370e-01, double 1.412540e-01, double 1.428890e-01, double 1.445440e-01, double 1.462180e-01, double 1.479110e-01, double 1.496240e-01, double 1.513560e-01, double 1.531090e-01, double 1.548820e-01, double 1.566750e-01, double 1.584890e-01, double 1.603250e-01, double 1.621810e-01, double 1.640590e-01, double 1.659590e-01, double 1.678800e-01, double 1.698240e-01, double 1.717910e-01, double 1.737800e-01, double 1.757920e-01, double 1.778280e-01, double 1.798870e-01, double 1.819700e-01, double 1.840770e-01, double 1.862090e-01, double 1.883650e-01, double 1.905460e-01, double 1.927520e-01, double 1.949840e-01, double 1.972420e-01, double 1.995260e-01, double 2.018370e-01, double 2.041740e-01, double 2.065380e-01, double 2.089300e-01, double 2.113490e-01, double 2.137960e-01, double 2.162720e-01, double 2.187760e-01, double 2.213090e-01, double 2.238720e-01, double 2.264640e-01, double 2.290870e-01, double 2.317390e-01, double 2.344230e-01, double 2.371370e-01, double 2.398830e-01, double 2.426610e-01, double 2.454710e-01, double 2.483130e-01, double 2.511890e-01, double 2.540970e-01, double 2.570400e-01, double 2.600160e-01, double 2.630270e-01, double 2.660730e-01, double 2.691530e-01, double 2.722700e-01, double 2.754230e-01, double 2.786120e-01, double 2.818380e-01, double 2.851020e-01, double 2.884030e-01, double 2.917430e-01, double 2.951210e-01, double 2.985380e-01, double 3.019950e-01, double 3.054920e-01, double 3.090300e-01, double 3.126080e-01, double 3.162280e-01, double 3.198900e-01, double 3.235940e-01, double 3.273410e-01, double 3.311310e-01, double 3.349650e-01, double 3.388440e-01, double 3.427680e-01, double 3.467370e-01, double 3.507520e-01, double 3.548130e-01, double 3.589220e-01, double 3.630780e-01, double 3.672820e-01, double 3.715350e-01, double 3.758370e-01, double 3.801890e-01, double 3.845920e-01, double 3.890450e-01, double 3.935500e-01, double 3.981070e-01, double 4.027170e-01, double 4.073800e-01, double 4.120980e-01, double 4.168690e-01, double 4.216970e-01, double 4.265800e-01, double 4.315190e-01, double 4.365160e-01, double 4.415700e-01, double 4.466840e-01, double 4.518560e-01, double 4.570880e-01, double 4.623810e-01, double 4.677350e-01, double 4.731510e-01, double 4.786300e-01, double 4.841720e-01, double 4.897790e-01, double 4.954500e-01, double 5.011870e-01, double 5.069910e-01, double 5.128610e-01, double 5.188000e-01, double 5.248070e-01, double 5.308840e-01, double 5.370320e-01, double 5.432500e-01, double 5.495410e-01, double 5.559040e-01, double 5.623410e-01, double 5.688530e-01, double 5.754400e-01, double 5.821030e-01, double 5.888440e-01, double 5.956620e-01, double 6.025600e-01, double 6.095370e-01, double 6.165950e-01, double 6.237350e-01, double 6.309570e-01, double 6.382630e-01, double 6.456540e-01, double 6.531310e-01, double 0x3FE52465A57646AE, double 6.683440e-01, double 0x3FE5A278D0CC35CE, double 6.839120e-01, double 6.918310e-01, double 6.998420e-01, double 0x3FE6A77E5EAAB042, double 0x3FE6EAA4B9884C6A, double 7.244360e-01, double 7.328250e-01, double 7.413100e-01, double 7.498940e-01, double 7.585780e-01, double 0x3FE88E38A7E73A36, double 7.762470e-01, double 7.852360e-01, double 7.943280e-01, double 0x3FE9B67C286F8AD2, double 8.128310e-01, double 8.222430e-01, double 0x3FEA9DCF893FAF42, double 8.413950e-01, double 0x3FEB3C85C24C404A, double 8.609940e-01, double 8.709640e-01, double 8.810490e-01, double 8.912510e-01, double 9.015710e-01, double 9.120110e-01, double 9.225710e-01, double 9.332540e-01, double 9.440610e-01, double 0x3FEE8F4D7ADD15F0, double 0x3FEEE9E3C968943E, double 9.772370e-01, double 9.885530e-01, double 1.000000e+00], align 16
@midi_log_10 = hidden global [128 x double] [double 1.440000e+03, double 0x409A4C2C0229A5EC, double 0x409688E03C4B09EA, double 0x40945562491AFC05, double 0x4092C59476AF89C6, double 0x40918F77CA2120E2, double 0x40909216837F7BE1, double 0x408F77B7646AE3A4, double 0x408E049161A1DB87, double 0x408CBD3117B5286B, double 0x408B9858090B417D, double 0x408A8F6E3A3A8E71, double 0x40899D957B41BFBE, double 0x4088BF1B36BD2B6F, double 0x4087F11FD8ADAB9F, double 0x4087315C1DF3300E, double 0x40867DF9D66ADB40, double 0x4085D578811B1D93, double 0x408536998BF7F067, double 0x4084A0521B3AEEE9, double 0x408411C07D4E0978, double 0x40838A23EC892AB7, double 0x408308D6AF038E2A, double 0x40828D492146A1A5, double 0x408216FDF00ABF77, double 0x4081A58715831F04, double 0x40813883AB862B28, double 0x4080CF9D9F4D37C1, double 0x40806A884D76AB58, double 0x408008FF26F1DC51, double 0x407F5589246BF013, double 0x407E9F4213A0C6B5, double 0x407DEEC4955B4678, double 0x407D43B5903A7547, double 0x407C9DC1EABBCB1D, double 0x407BFC9DDD2AE8E2, double 0x407B60040181E03F, double 0x407AC7B49F0E4DA1, double 0x407A33751EFB6DCA, double 0x4079A30F8B588E37, double 0x40791651E42E1262, double 0x40788D0DE2AC3223, double 0x40780718C197E564, double 0x4077844A8E2E2B8C, double 0x4077047E468CAC4B, double 0x4076879141A6937D, double 0x40760D632C1F42BB, double 0x407595D5CB790FB6, double 0x407520CCC89B0EE5, double 0x4074AE2D80A17B0F, double 0x40743DDF138BCDFF, double 0x4073CFCA148BA83F, double 0x407363D83F91E647, double 0x4072F9F4D9C6B053, double 0x4072920C271FFF7A, double 0x40722C0B9A9DA598, double 0x4071C7E18372E6A7, double 0x4071657D4067CF1C, double 0x407104CF3775B813, double 0x4070A5C8387DF5CF, double 0x4070485A0DFDEF85, double 0x406FD8EE7E62DC6E, double 0x406F2425FA658C4C, double 0x406E7241DB0142F6, double 0x406DC32AFDDA8BD2, double 0x406D16CB09E98DCE, double 0x406C6D0CF398E970, double 0x406BC5DC2B0EA183, double 0x406B2125A89B951C, double 0x406A7ED692B3CC4B, double 0x4069DEDD8D79D0A6, double 0x406941296D4C33B5, double 0x4068A5A9D40EE06E, double 0x40680C4F5B1C8649, double 0x4067750B0F27BB30, double 0x4066DFCE8FB00BCC, double 0x40664C8C111ADA77, double 0x4065BB365ECC3E32, double 0x40652BC0E7BC3C5C, double 0x40649E1F127F5E85, double 0x40641245996744B3, double 0x40638828B8F14DB6, double 0x4062FFBD96638434, double 0x406278F9EE02A77A, double 0x4061F3D35653C9AC, double 0x4061704031487768, double 0x4060EE36ED677708, double 0x40606DAEAB7995EE, double 0x405FDD3CC07AAEF3, double 0x405EE1FB506DD69D, double 0x405DE988ACE24BBA, double 0x405CF3D4E8FB00BD, double 0x405C00D052934ACB, double 0x405B106C7EAE5BC8, double 0x405A229ACFFA7EB7, double 0x4059374D48882F0E, double 0x40584E76C8B43958, double 0x40576809A671EF31, double 0x405683F9A49C2C1B, double 0x4055A23A71151612, double 0x4054C2BFF47735C2, double 0x4053E57F1737542A, double 0x40530A6BF444E0DB, double 0x4052317C3504C48B, double 0x40515AA4A48F96E1, double 0x405085DBBE0157EF, double 0x404F662E12620254, double 0x404DC499D883BA34, double 0x404C26E8858FF759, double 0x404A8D06DD69D302, double 0x4048F6E4217D284A, double 0x4047646D8B1DD5D4, double 0x4045D593682730C6, double 0x40444A446B69DB66, double 0x4042C2714FCE746D, double 0x40413E0ABF76A2F5, double 0x403F7A01FFB480A6, double 0x403C7E8997C3D684, double 0x4039899220FF5409, double 0x40369AFC04C8BC9D, double 0x4033B2AF6837F7BE, double 0x4030D08E68E3EF28, double 0x402BE904F6DFC5CE, double 0x40263CDEA033E78E, double 0x40209C7CB70AC3A8, double 0x40160F53C579F234, double 0x4005F8EB8950763A, double 0.000000e+00], align 16
@panleftLUT = hidden global [128 x double] [double 0.000000e+00, double 0xBF7BA5E353F7CED9, double -2.700200e-02, double -6.076100e-02, double -1.080400e-01, double -1.688510e-01, double -2.432150e-01, double -3.311550e-01, double -4.326970e-01, double -5.478750e-01, double -6.767230e-01, double -8.192840e-01, double -9.756010e-01, double 0xBFF254E2B063E07A, double 0xBFF5467BE553AC4F, double 0xBFF8711947CFA26A, double 0xBFFBD4FBDAD7518B, double 0xBFFF726D04E618CE, double 0xC001A4DCA8E2E2B9, double 0xC003AD9945B6C376, double 0xC005D397DD00F777, double 0xC0081707182235B5, double 0xC00A7818C5C9A34D, double 0xC00CF6FFC115DF65, double 0xC00F93F4A98AA865, double 0xC01127980F55DE59, double -4.644990e+00, double 0xC01410BAA582DBE8, double 0xC0159C814D72799A, double 0xC01737EF9DB22D0E, double 0xC018E32ACFB762D8, double 0xC01A9E5A35D67BA2, double 0xC01C69A671EF30A5, double 0xC01E453A81DC0DB2, double 0xC02018A19C9D5A18, double 0xC02116F7A0B5ED8D, double 0xC0221DB7CFE58601, double 0xC0232CFBDAD7518B, double 0xC02444DE7EA5F84D, double 0xC025657BC7F77AF6, double 0xC0268EF0AE536502, double 0xC027C15BBBE878FB, double 0xC028FCDD0D8CB07D, double 0xC02A41958969A0AE, double 0xC02B8FA80CF9E386, double 0xC02CE738E6D15AD1, double 0xC02E486DB50F40E6, double 0xC02FB36E503FB374, double 0xC0309431DF761CBD, double 0xC03153BC903EA705, double 0xC032186DD69D3027, double 0xC032E25D28D002E2, double 0xC033B1A32B12D341, double 0xC03486598E10CF5B, double 0xC035609B41398634, double 0xC036408461F9F01C, double 0xC03726326E115593, double 0xC03811C422036007, double 0xC0390359DDC1E796, double 0xC039FB1572580C31, double 0xC03AF91A65061416, double 0xC03BFD8DCDB37C9A, double 0xC03D0896BB98C7E3, double -3.010300e+01, double 0xC03F330F3882278D, double 0xC040296B87379746, double 0xC040BCF2AE07E5A8, double -3.465790e+01, double 0xC041EF5019F3C70D, double 0xC0428E5C9A34CA0C, double 0xC0433178DD616F87, double 0xC043D8C3DAB5C39C, double 0xC044845E56CD6C2F, double 0xC045346AE3A3A8E7, double 0xC045E90E23AF31B1, double 0xC046A26EE30CAA32, double 0xC04760B649D388A9, double 0xC04824100E6AFCCE, double 0xC048ECAA9F7B5AEA, double 0xC049BAB76F6D7625, double 0xC04A8E6B26BF876A, double 0xC04B67FDEF8487BA, double 0xC04C47ABC947064F, double 0xC04D2DB4F6167232, double 0xC04E1A5E2CDC011D, double 0xC04F0DF141205BC0, double 0xC050045EBB7739F3, double 0xC050858C154C985F, double 0xC0510AAEBC408D8F, double 0xC05193F865D7CB2E, double 0xC052219EECBFB15B, double 0xC052B3DCBDDB9842, double 0xC0534AF15E7C8D19, double 0xC053E7220791C4B9, double 0xC05488BA5E353F7D, double 0xC055300D413122B8, double 0xC055DD75C0767D35, double 0xC0569158298CC144, double 0xC0574C23704790B8, double 0xC0580E529BAE46D0, double 0xC058D86EA4228998, double 0xC059AB10BA6266FD, double 0xC05A86E4C0DF58C1, double 0xC05B6CACA7935760, double 0xC05C5D443914F484, double 0xC05D59A5F41AEF70, double 0xC05E62F112FD32C6, double 0xC05F7A710880D802, double 0xC06050D38EF34D6A, double 0xC060ED2B5E529BAE, double 0xC061934AC083126F, double 0xC062447038E29F9D, double 0xC063021C4B90214B, double 0xC063CE2517E77D52, double 0xC064AAD1CE28ED5F, double 0xC0659B0214AD362F, double 0xC066A2685DB76B3C, double 0xC067C5E2EB1C432D, double 0xC0690C09A459103D, double 0xC06A7E1B0468448D, double 0xC06C29A0EE8D10F5, double 0xC06E2398AC9F2FDC, double 0xC070479610ADCD2D, double 0xC071D7235C5B4AA9, double 0xC0740A733CA31E7E, double 0xC077CDA35D67BA23, double -9.600000e+02, double 0.000000e+00], align 16
@panrightLUT = hidden global [128 x double] [double -9.600000e+02, double 0xC077CDA35D67BA23, double 0xC0740A733CA31E7E, double 0xC071D7235C5B4AA9, double 0xC070479610ADCD2D, double 0xC06E2398AC9F2FDC, double 0xC06C29A0EE8D10F5, double 0xC06A7E1B0468448D, double 0xC0690C09A459103D, double 0xC067C5E2EB1C432D, double 0xC066A2685DB76B3C, double 0xC0659B0214AD362F, double 0xC064AAD1CE28ED5F, double 0xC063CE2517E77D52, double 0xC063021C4B90214B, double 0xC062447038E29F9D, double 0xC061934AC083126F, double 0xC060ED2B5E529BAE, double 0xC06050D38EF34D6A, double 0xC05F7A710880D802, double 0xC05E62F112FD32C6, double 0xC05D59A5F41AEF70, double 0xC05C5D443914F484, double 0xC05B6CACA7935760, double 0xC05A86E4C0DF58C1, double 0xC059AB10BA6266FD, double 0xC058D86EA4228998, double 0xC0580E529BAE46D0, double 0xC0574C23704790B8, double 0xC0569158298CC144, double 0xC055DD75C0767D35, double 0xC055300D413122B8, double 0xC05488BA5E353F7D, double 0xC053E7220791C4B9, double 0xC0534AF15E7C8D19, double 0xC052B3DCBDDB9842, double 0xC052219EECBFB15B, double 0xC05193F865D7CB2E, double 0xC0510AAEBC408D8F, double 0xC050858C154C985F, double 0xC050045EBB7739F3, double 0xC04F0DF141205BC0, double 0xC04E1A5E2CDC011D, double 0xC04D2DB4F6167232, double 0xC04C47ABC947064F, double 0xC04B67FDEF8487BA, double 0xC04A8E6B26BF876A, double 0xC049BAB76F6D7625, double 0xC048ECAA9F7B5AEA, double 0xC04824100E6AFCCE, double 0xC04760B649D388A9, double 0xC046A26EE30CAA32, double 0xC045E90E23AF31B1, double 0xC045346AE3A3A8E7, double 0xC044845E56CD6C2F, double 0xC043D8C3DAB5C39C, double 0xC0433178DD616F87, double 0xC0428E5C9A34CA0C, double 0xC041EF5019F3C70D, double -3.465790e+01, double 0xC040BCF2AE07E5A8, double 0xC040296B87379746, double 0xC03F330F3882278D, double -3.010300e+01, double 0xC03D0896BB98C7E3, double 0xC03BFD8DCDB37C9A, double 0xC03AF91A65061416, double 0xC039FB1572580C31, double 0xC0390359DDC1E796, double 0xC03811C422036007, double 0xC03726326E115593, double 0xC036408461F9F01C, double 0xC035609B41398634, double 0xC03486598E10CF5B, double 0xC033B1A32B12D341, double 0xC032E25D28D002E2, double 0xC032186DD69D3027, double 0xC03153BC903EA705, double 0xC0309431DF761CBD, double 0xC02FB36E503FB374, double 0xC02E486DB50F40E6, double 0xC02CE738E6D15AD1, double 0xC02B8FA80CF9E386, double 0xC02A41958969A0AE, double 0xC028FCDD0D8CB07D, double 0xC027C15BBBE878FB, double 0xC0268EF0AE536502, double 0xC025657BC7F77AF6, double 0xC02444DE7EA5F84D, double 0xC0232CFBDAD7518B, double 0xC0221DB7CFE58601, double 0xC02116F7A0B5ED8D, double 0xC02018A19C9D5A18, double 0xC01E453A81DC0DB2, double 0xC01C69A671EF30A5, double 0xC01A9E5A35D67BA2, double 0xC018E32ACFB762D8, double 0xC01737EF9DB22D0E, double 0xC0159C814D72799A, double 0xC01410BAA582DBE8, double -4.644990e+00, double 0xC01127980F55DE59, double 0xC00F93F4A98AA865, double 0xC00CF6FFC115DF65, double 0xC00A7818C5C9A34D, double 0xC0081707182235B5, double 0xC005D397DD00F777, double 0xC003AD9945B6C376, double 0xC001A4DCA8E2E2B9, double 0xBFFF726D04E618CE, double 0xBFFBD4FBDAD7518B, double 0xBFF8711947CFA26A, double 0xBFF5467BE553AC4F, double 0xBFF254E2B063E07A, double -9.756010e-01, double -8.192840e-01, double -6.767230e-01, double -5.478750e-01, double -4.326970e-01, double -3.311550e-01, double -2.432150e-01, double -1.688510e-01, double -1.080400e-01, double -6.076100e-02, double -2.700200e-02, double 0xBF7BA5E353F7CED9, double 0.000000e+00, double 0.000000e+00], align 16
@spsIndx = hidden global i8 0, align 1
@sps = hidden global [64 x %struct.spinner] zeroinitializer, align 16
@pcms = hidden global [2222 x %struct.pcm_t] zeroinitializer, align 16
@zones = hidden global [4096 x %struct.zone_t] zeroinitializer, align 16
@outputs = hidden global [16384 x float] zeroinitializer, align 16
@silence = hidden global [40 x float] zeroinitializer, align 16
@eg = hidden global [128 x %struct.EG] zeroinitializer, align 16
@lfos = hidden global [128 x %struct.LFO] zeroinitializer, align 16
@midi_cc_vals = hidden global [2048 x i8] zeroinitializer, align 16
@pitch_bend_msb = hidden global [2048 x i8] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone
define hidden double @midi_volume_log10(i32 noundef %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store double 1.440000e+03, ptr %2, align 8
  br label %15

7:                                                ; preds = %1
  %8 = load i32, ptr %3, align 4
  %9 = icmp sgt i32 %8, 128
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store double 0.000000e+00, ptr %2, align 8
  br label %15

11:                                               ; preds = %7
  %12 = load i32, ptr %3, align 4
  %13 = getelementptr inbounds [128 x double], ptr @midi_log_10, i32 0, i32 %12
  %14 = load double, ptr %13, align 8
  store double %14, ptr %2, align 8
  br label %15

15:                                               ; preds = %11, %10, %6
  %16 = load double, ptr %2, align 8
  ret double %16
}

; Function Attrs: noinline nounwind optnone
define hidden double @timecent2second(i16 noundef signext %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i16, align 2
  store i16 %0, ptr %3, align 2
  %4 = load i16, ptr %3, align 2
  %5 = sext i16 %4 to i32
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = load i16, ptr %3, align 2
  %9 = sext i16 %8 to i32
  %10 = mul nsw i32 -1, %9
  %11 = trunc i32 %10 to i16
  %12 = call double @timecent2second(i16 noundef signext %11)
  %13 = fdiv double 1.000000e+00, %12
  store double %13, ptr %2, align 8
  br label %31

14:                                               ; preds = %1
  %15 = load i16, ptr %3, align 2
  %16 = sext i16 %15 to i32
  %17 = icmp sgt i32 %16, 1200
  br i1 %17, label %18, label %26

18:                                               ; preds = %14
  %19 = load i16, ptr %3, align 2
  %20 = sext i16 %19 to i32
  %21 = sitofp i32 %20 to float
  %22 = fsub float %21, 1.200000e+03
  %23 = fptosi float %22 to i16
  %24 = call double @timecent2second(i16 noundef signext %23)
  %25 = fmul double 2.000000e+00, %24
  store double %25, ptr %2, align 8
  br label %31

26:                                               ; preds = %14
  %27 = load i16, ptr %3, align 2
  %28 = sext i16 %27 to i32
  %29 = getelementptr inbounds [1201 x double], ptr @p2over1200, i32 0, i32 %28
  %30 = load double, ptr %29, align 8
  store double %30, ptr %2, align 8
  br label %31

31:                                               ; preds = %26, %18, %7
  %32 = load double, ptr %2, align 8
  ret double %32
}

; Function Attrs: noinline nounwind optnone
define hidden double @timecent2hertz(i16 noundef signext %0) #0 {
  %2 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  %3 = load i16, ptr %2, align 2
  %4 = call double @timecent2second(i16 noundef signext %3)
  %5 = fmul double 0x40205A1CA0000000, %4
  ret double %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @timecent2sample(i16 noundef signext %0) #0 {
  %2 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  %3 = load i16, ptr %2, align 2
  %4 = call double @timecent2second(i16 noundef signext %3)
  %5 = fmul double %4, 4.410000e+04
  %6 = fptosi double %5 to i32
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden double @attack_db_inc(i16 noundef signext %0) #0 {
  %2 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  %3 = load i16, ptr %2, align 2
  %4 = call double @timecent2second(i16 noundef signext %3)
  %5 = fdiv double 9.600000e+02, %4
  %6 = fdiv double %5, 4.410000e+04
  ret double %6
}

; Function Attrs: noinline nounwind optnone
define hidden float @applyCentible(float noundef %0, i16 noundef signext %1) #0 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca i16, align 2
  store float %0, ptr %4, align 4
  store i16 %1, ptr %5, align 2
  %6 = load i16, ptr %5, align 2
  %7 = sext i16 %6 to i32
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = load float, ptr %4, align 4
  store float %10, ptr %3, align 4
  br label %26

11:                                               ; preds = %2
  %12 = load i16, ptr %5, align 2
  %13 = sext i16 %12 to i32
  %14 = icmp sle i32 %13, -1240
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  store float 0.000000e+00, ptr %3, align 4
  br label %26

16:                                               ; preds = %11
  %17 = load float, ptr %4, align 4
  %18 = fpext float %17 to double
  %19 = load i16, ptr %5, align 2
  %20 = sext i16 %19 to i32
  %21 = add nsw i32 %20, 1440
  %22 = getelementptr inbounds [1441 x double], ptr @p10over200, i32 0, i32 %21
  %23 = load double, ptr %22, align 8
  %24 = fmul double %18, %23
  %25 = fptrunc double %24 to float
  store float %25, ptr %3, align 4
  br label %26

26:                                               ; preds = %16, %15, %9
  %27 = load float, ptr %3, align 4
  ret float %27
}

; Function Attrs: noinline nounwind optnone
define hidden float @hermite4(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4) #0 {
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  store float %0, ptr %6, align 4
  store float %1, ptr %7, align 4
  store float %2, ptr %8, align 4
  store float %3, ptr %9, align 4
  store float %4, ptr %10, align 4
  %16 = load float, ptr %9, align 4
  %17 = load float, ptr %7, align 4
  %18 = fsub float %16, %17
  %19 = fmul float %18, 5.000000e-01
  store float %19, ptr %11, align 4
  %20 = load float, ptr %8, align 4
  %21 = load float, ptr %9, align 4
  %22 = fsub float %20, %21
  store float %22, ptr %12, align 4
  %23 = load float, ptr %11, align 4
  %24 = load float, ptr %12, align 4
  %25 = fadd float %23, %24
  store float %25, ptr %13, align 4
  %26 = load float, ptr %13, align 4
  %27 = load float, ptr %12, align 4
  %28 = fadd float %26, %27
  %29 = load float, ptr %10, align 4
  %30 = load float, ptr %8, align 4
  %31 = fsub float %29, %30
  %32 = call float @llvm.fmuladd.f32(float %31, float 5.000000e-01, float %28)
  store float %32, ptr %14, align 4
  %33 = load float, ptr %13, align 4
  %34 = load float, ptr %14, align 4
  %35 = fadd float %33, %34
  store float %35, ptr %15, align 4
  %36 = load float, ptr %14, align 4
  %37 = load float, ptr %6, align 4
  %38 = load float, ptr %15, align 4
  %39 = fneg float %38
  %40 = call float @llvm.fmuladd.f32(float %36, float %37, float %39)
  %41 = load float, ptr %6, align 4
  %42 = load float, ptr %11, align 4
  %43 = call float @llvm.fmuladd.f32(float %40, float %41, float %42)
  %44 = load float, ptr %6, align 4
  %45 = load float, ptr %8, align 4
  %46 = call float @llvm.fmuladd.f32(float %43, float %44, float %45)
  ret float %46
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: noinline nounwind optnone
define hidden float @roll(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca float, align 4
  %4 = alloca ptr, align 4
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  store ptr %0, ptr %4, align 4
  store i32 %1, ptr %5, align 4
  %7 = load ptr, ptr %4, align 4
  %8 = getelementptr inbounds %struct.LFO, ptr %7, i32 0, i32 2
  %9 = load i16, ptr %8, align 2
  %10 = zext i16 %9 to i32
  %11 = load i32, ptr %5, align 4
  %12 = icmp ugt i32 %10, %11
  br i1 %12, label %13, label %21

13:                                               ; preds = %2
  %14 = load i32, ptr %5, align 4
  %15 = load ptr, ptr %4, align 4
  %16 = getelementptr inbounds %struct.LFO, ptr %15, i32 0, i32 2
  %17 = load i16, ptr %16, align 2
  %18 = zext i16 %17 to i32
  %19 = sub i32 %18, %14
  %20 = trunc i32 %19 to i16
  store i16 %20, ptr %16, align 2
  store float 0.000000e+00, ptr %3, align 4
  br label %55

21:                                               ; preds = %2
  %22 = load ptr, ptr %4, align 4
  %23 = getelementptr inbounds %struct.LFO, ptr %22, i32 0, i32 2
  %24 = load i16, ptr %23, align 2
  %25 = zext i16 %24 to i32
  %26 = load i32, ptr %5, align 4
  %27 = sub i32 %26, %25
  store i32 %27, ptr %5, align 4
  %28 = load ptr, ptr %4, align 4
  %29 = getelementptr inbounds %struct.LFO, ptr %28, i32 0, i32 2
  store i16 0, ptr %29, align 2
  br label %30

30:                                               ; preds = %21
  br label %31

31:                                               ; preds = %35, %30
  %32 = load i32, ptr %5, align 4
  %33 = add i32 %32, -1
  store i32 %33, ptr %5, align 4
  %34 = icmp ne i32 %32, 0
  br i1 %34, label %35, label %46

35:                                               ; preds = %31
  %36 = load ptr, ptr %4, align 4
  %37 = getelementptr inbounds %struct.LFO, ptr %36, i32 0, i32 1
  %38 = load i16, ptr %37, align 2
  %39 = zext i16 %38 to i32
  %40 = load ptr, ptr %4, align 4
  %41 = getelementptr inbounds %struct.LFO, ptr %40, i32 0, i32 0
  %42 = load i16, ptr %41, align 2
  %43 = zext i16 %42 to i32
  %44 = add nsw i32 %43, %39
  %45 = trunc i32 %44 to i16
  store i16 %45, ptr %41, align 2
  br label %31, !llvm.loop !2

46:                                               ; preds = %31
  %47 = load ptr, ptr %4, align 4
  %48 = getelementptr inbounds %struct.LFO, ptr %47, i32 0, i32 0
  %49 = load i16, ptr %48, align 2
  %50 = sext i16 %49 to i32
  %51 = sitofp i32 %50 to float
  %52 = fmul float %51, 1.000000e+00
  %53 = fdiv float %52, 3.276750e+04
  store float %53, ptr %6, align 4
  %54 = load float, ptr %6, align 4
  store float %54, ptr %3, align 4
  br label %55

55:                                               ; preds = %46, %13
  %56 = load float, ptr %3, align 4
  ret float %56
}

; Function Attrs: noinline nounwind optnone
define hidden void @set_frequency(ptr noundef %0, i16 noundef signext %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca i16, align 2
  store ptr %0, ptr %3, align 4
  store i16 %1, ptr %4, align 2
  %5 = load i16, ptr %4, align 2
  %6 = call i32 @timecent2sample(i16 noundef signext %5)
  %7 = sitofp i32 %6 to float
  %8 = fdiv float 0x40F00001A0000000, %7
  %9 = fptoui float %8 to i16
  %10 = load ptr, ptr %3, align 4
  %11 = getelementptr inbounds %struct.LFO, ptr %10, i32 0, i32 1
  store i16 %9, ptr %11, align 2
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @centdb_val(ptr noundef %0) #0 {
  %2 = alloca ptr, align 4
  store ptr %0, ptr %2, align 4
  %3 = load ptr, ptr %2, align 4
  %4 = getelementptr inbounds %struct.LFO, ptr %3, i32 0, i32 0
  %5 = load i16, ptr %4, align 2
  %6 = zext i16 %5 to i32
  %7 = sub nsw i32 1, %6
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 5.000000e-01
  %10 = fptrunc double %9 to float
  ret float %10
}

; Function Attrs: noinline nounwind optnone
define hidden float @update_eg(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca float, align 4
  %4 = alloca ptr, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store ptr %0, ptr %4, align 4
  store i32 %1, ptr %5, align 4
  %8 = load ptr, ptr %4, align 4
  %9 = getelementptr inbounds %struct.EG, ptr %8, i32 0, i32 3
  %10 = load i32, ptr %9, align 4
  %11 = icmp eq i32 %10, 99
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  store float 0.000000e+00, ptr %3, align 4
  br label %81

13:                                               ; preds = %2
  %14 = load ptr, ptr %4, align 4
  %15 = getelementptr inbounds %struct.EG, ptr %14, i32 0, i32 0
  %16 = load float, ptr %15, align 4
  %17 = fcmp olt float %16, -1.360000e+03
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = load ptr, ptr %4, align 4
  %20 = getelementptr inbounds %struct.EG, ptr %19, i32 0, i32 3
  store i32 99, ptr %20, align 4
  %21 = load ptr, ptr %4, align 4
  %22 = getelementptr inbounds %struct.EG, ptr %21, i32 0, i32 0
  %23 = load float, ptr %22, align 4
  store float %23, ptr %3, align 4
  br label %81

24:                                               ; preds = %13
  %25 = load i32, ptr %5, align 4
  %26 = load ptr, ptr %4, align 4
  %27 = getelementptr inbounds %struct.EG, ptr %26, i32 0, i32 4
  %28 = load i32, ptr %27, align 4
  %29 = icmp sgt i32 %25, %28
  br i1 %29, label %30, label %34

30:                                               ; preds = %24
  %31 = load ptr, ptr %4, align 4
  %32 = getelementptr inbounds %struct.EG, ptr %31, i32 0, i32 4
  %33 = load i32, ptr %32, align 4
  br label %36

34:                                               ; preds = %24
  %35 = load i32, ptr %5, align 4
  br label %36

36:                                               ; preds = %34, %30
  %37 = phi i32 [ %33, %30 ], [ %35, %34 ]
  store i32 %37, ptr %6, align 4
  %38 = load ptr, ptr %4, align 4
  %39 = getelementptr inbounds %struct.EG, ptr %38, i32 0, i32 4
  %40 = load i32, ptr %39, align 4
  %41 = icmp ne i32 %40, 65535
  br i1 %41, label %42, label %57

42:                                               ; preds = %36
  %43 = load i32, ptr %6, align 4
  %44 = load ptr, ptr %4, align 4
  %45 = getelementptr inbounds %struct.EG, ptr %44, i32 0, i32 4
  %46 = load i32, ptr %45, align 4
  %47 = sub nsw i32 %46, %43
  store i32 %47, ptr %45, align 4
  %48 = load ptr, ptr %4, align 4
  %49 = getelementptr inbounds %struct.EG, ptr %48, i32 0, i32 1
  %50 = load float, ptr %49, align 4
  %51 = load i32, ptr %6, align 4
  %52 = sitofp i32 %51 to float
  %53 = load ptr, ptr %4, align 4
  %54 = getelementptr inbounds %struct.EG, ptr %53, i32 0, i32 0
  %55 = load float, ptr %54, align 4
  %56 = call float @llvm.fmuladd.f32(float %50, float %52, float %55)
  store float %56, ptr %54, align 4
  br label %57

57:                                               ; preds = %42, %36
  %58 = load i32, ptr %6, align 4
  %59 = load i32, ptr %5, align 4
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = load ptr, ptr %4, align 4
  %63 = getelementptr inbounds %struct.EG, ptr %62, i32 0, i32 0
  %64 = load float, ptr %63, align 4
  store float %64, ptr %3, align 4
  br label %81

65:                                               ; preds = %57
  %66 = load i32, ptr %5, align 4
  %67 = load i32, ptr %6, align 4
  %68 = sub nsw i32 %66, %67
  %69 = sub nsw i32 %68, 1
  store i32 %69, ptr %7, align 4
  %70 = load ptr, ptr %4, align 4
  call void @advanceStage(ptr noundef %70)
  %71 = load i32, ptr %7, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %65
  %74 = load ptr, ptr %4, align 4
  %75 = load i32, ptr %7, align 4
  %76 = call float @update_eg(ptr noundef %74, i32 noundef %75)
  store float %76, ptr %3, align 4
  br label %81

77:                                               ; preds = %65
  %78 = load ptr, ptr %4, align 4
  %79 = getelementptr inbounds %struct.EG, ptr %78, i32 0, i32 0
  %80 = load float, ptr %79, align 4
  store float %80, ptr %3, align 4
  br label %81

81:                                               ; preds = %77, %73, %61, %18, %12
  %82 = load float, ptr %3, align 4
  ret float %82
}

; Function Attrs: noinline nounwind optnone
define hidden void @advanceStage(ptr noundef %0) #0 {
  %2 = alloca ptr, align 4
  %3 = alloca i32, align 4
  store ptr %0, ptr %2, align 4
  %4 = load ptr, ptr %2, align 4
  %5 = getelementptr inbounds %struct.EG, ptr %4, i32 0, i32 3
  %6 = load i32, ptr %5, align 4
  switch i32 %6, label %160 [
    i32 0, label %7
    i32 1, label %12
    i32 2, label %36
    i32 3, label %65
    i32 4, label %89
    i32 5, label %117
    i32 6, label %122
    i32 7, label %150
    i32 99, label %159
  ]

7:                                                ; preds = %1
  %8 = load ptr, ptr %2, align 4
  %9 = getelementptr inbounds %struct.EG, ptr %8, i32 0, i32 3
  %10 = load i32, ptr %9, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, ptr %9, align 4
  br label %160

12:                                               ; preds = %1
  %13 = load ptr, ptr %2, align 4
  %14 = getelementptr inbounds %struct.EG, ptr %13, i32 0, i32 0
  store float -9.600000e+02, ptr %14, align 4
  %15 = load ptr, ptr %2, align 4
  %16 = getelementptr inbounds %struct.EG, ptr %15, i32 0, i32 3
  %17 = load i32, ptr %16, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, ptr %16, align 4
  %19 = load ptr, ptr %2, align 4
  %20 = getelementptr inbounds %struct.EG, ptr %19, i32 0, i32 5
  %21 = load i16, ptr %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp sgt i32 %22, -11500
  br i1 %23, label %24, label %35

24:                                               ; preds = %12
  %25 = load ptr, ptr %2, align 4
  %26 = getelementptr inbounds %struct.EG, ptr %25, i32 0, i32 5
  %27 = load i16, ptr %26, align 4
  %28 = call i32 @timecent2sample(i16 noundef signext %27)
  %29 = load ptr, ptr %2, align 4
  %30 = getelementptr inbounds %struct.EG, ptr %29, i32 0, i32 4
  store i32 %28, ptr %30, align 4
  %31 = load ptr, ptr %2, align 4
  %32 = getelementptr inbounds %struct.EG, ptr %31, i32 0, i32 0
  store float -9.600000e+02, ptr %32, align 4
  %33 = load ptr, ptr %2, align 4
  %34 = getelementptr inbounds %struct.EG, ptr %33, i32 0, i32 1
  store float 0.000000e+00, ptr %34, align 4
  br label %160

35:                                               ; preds = %12
  br label %36

36:                                               ; preds = %1, %35
  %37 = load ptr, ptr %2, align 4
  %38 = getelementptr inbounds %struct.EG, ptr %37, i32 0, i32 0
  store float -9.600000e+02, ptr %38, align 4
  %39 = load ptr, ptr %2, align 4
  %40 = getelementptr inbounds %struct.EG, ptr %39, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, ptr %40, align 4
  %43 = load ptr, ptr %2, align 4
  %44 = getelementptr inbounds %struct.EG, ptr %43, i32 0, i32 6
  %45 = load i16, ptr %44, align 2
  %46 = sext i16 %45 to i32
  %47 = icmp sgt i32 %46, -11500
  br i1 %47, label %48, label %64

48:                                               ; preds = %36
  %49 = load ptr, ptr %2, align 4
  %50 = getelementptr inbounds %struct.EG, ptr %49, i32 0, i32 0
  store float -9.600000e+02, ptr %50, align 4
  %51 = load ptr, ptr %2, align 4
  %52 = getelementptr inbounds %struct.EG, ptr %51, i32 0, i32 6
  %53 = load i16, ptr %52, align 2
  %54 = call i32 @timecent2sample(i16 noundef signext %53)
  %55 = load ptr, ptr %2, align 4
  %56 = getelementptr inbounds %struct.EG, ptr %55, i32 0, i32 4
  store i32 %54, ptr %56, align 4
  %57 = load ptr, ptr %2, align 4
  %58 = getelementptr inbounds %struct.EG, ptr %57, i32 0, i32 4
  %59 = load i32, ptr %58, align 4
  %60 = sitofp i32 %59 to float
  %61 = fdiv float 9.600000e+02, %60
  %62 = load ptr, ptr %2, align 4
  %63 = getelementptr inbounds %struct.EG, ptr %62, i32 0, i32 1
  store float %61, ptr %63, align 4
  br label %160

64:                                               ; preds = %36
  br label %65

65:                                               ; preds = %1, %64
  %66 = load ptr, ptr %2, align 4
  %67 = getelementptr inbounds %struct.EG, ptr %66, i32 0, i32 0
  store float 0.000000e+00, ptr %67, align 4
  %68 = load ptr, ptr %2, align 4
  %69 = getelementptr inbounds %struct.EG, ptr %68, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, ptr %69, align 4
  %72 = load ptr, ptr %2, align 4
  %73 = getelementptr inbounds %struct.EG, ptr %72, i32 0, i32 7
  %74 = load i16, ptr %73, align 4
  %75 = sext i16 %74 to i32
  %76 = icmp sgt i32 %75, -11500
  br i1 %76, label %77, label %88

77:                                               ; preds = %65
  %78 = load ptr, ptr %2, align 4
  %79 = getelementptr inbounds %struct.EG, ptr %78, i32 0, i32 0
  store float 0.000000e+00, ptr %79, align 4
  %80 = load ptr, ptr %2, align 4
  %81 = getelementptr inbounds %struct.EG, ptr %80, i32 0, i32 7
  %82 = load i16, ptr %81, align 4
  %83 = call i32 @timecent2sample(i16 noundef signext %82)
  %84 = load ptr, ptr %2, align 4
  %85 = getelementptr inbounds %struct.EG, ptr %84, i32 0, i32 4
  store i32 %83, ptr %85, align 4
  %86 = load ptr, ptr %2, align 4
  %87 = getelementptr inbounds %struct.EG, ptr %86, i32 0, i32 1
  store float 0.000000e+00, ptr %87, align 4
  br label %160

88:                                               ; preds = %65
  br label %89

89:                                               ; preds = %1, %88
  %90 = load ptr, ptr %2, align 4
  %91 = getelementptr inbounds %struct.EG, ptr %90, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, ptr %91, align 4
  %94 = load ptr, ptr %2, align 4
  %95 = getelementptr inbounds %struct.EG, ptr %94, i32 0, i32 8
  %96 = load i16, ptr %95, align 2
  %97 = call i32 @timecent2sample(i16 noundef signext %96)
  %98 = sitofp i32 %97 to float
  %99 = fdiv float -9.600000e+02, %98
  %100 = load ptr, ptr %2, align 4
  %101 = getelementptr inbounds %struct.EG, ptr %100, i32 0, i32 1
  store float %99, ptr %101, align 4
  %102 = load ptr, ptr %2, align 4
  %103 = getelementptr inbounds %struct.EG, ptr %102, i32 0, i32 9
  %104 = load i16, ptr %103, align 4
  %105 = sext i16 %104 to i32
  %106 = sitofp i32 %105 to float
  %107 = fdiv float %106, 1.000000e+03
  %108 = load ptr, ptr %2, align 4
  %109 = getelementptr inbounds %struct.EG, ptr %108, i32 0, i32 8
  %110 = load i16, ptr %109, align 2
  %111 = call i32 @timecent2sample(i16 noundef signext %110)
  %112 = sitofp i32 %111 to float
  %113 = fmul float %107, %112
  %114 = fptosi float %113 to i32
  %115 = load ptr, ptr %2, align 4
  %116 = getelementptr inbounds %struct.EG, ptr %115, i32 0, i32 4
  store i32 %114, ptr %116, align 4
  br label %160

117:                                              ; preds = %1
  %118 = load ptr, ptr %2, align 4
  %119 = getelementptr inbounds %struct.EG, ptr %118, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, ptr %119, align 4
  br label %160

122:                                              ; preds = %1
  %123 = load ptr, ptr %2, align 4
  %124 = getelementptr inbounds %struct.EG, ptr %123, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, ptr %124, align 4
  %127 = load ptr, ptr %2, align 4
  %128 = getelementptr inbounds %struct.EG, ptr %127, i32 0, i32 10
  %129 = load i16, ptr %128, align 2
  %130 = call i32 @timecent2sample(i16 noundef signext %129)
  store i32 %130, ptr %3, align 4
  %131 = load ptr, ptr %2, align 4
  %132 = getelementptr inbounds %struct.EG, ptr %131, i32 0, i32 10
  %133 = load i16, ptr %132, align 2
  %134 = call i32 @timecent2sample(i16 noundef signext %133)
  %135 = sitofp i32 %134 to float
  %136 = fdiv float -9.600000e+02, %135
  %137 = load ptr, ptr %2, align 4
  %138 = getelementptr inbounds %struct.EG, ptr %137, i32 0, i32 1
  store float %136, ptr %138, align 4
  %139 = load ptr, ptr %2, align 4
  %140 = getelementptr inbounds %struct.EG, ptr %139, i32 0, i32 0
  %141 = load float, ptr %140, align 4
  %142 = fsub float -9.600000e+02, %141
  %143 = fdiv float %142, -9.600000e+02
  %144 = load i32, ptr %3, align 4
  %145 = sitofp i32 %144 to float
  %146 = fmul float %143, %145
  %147 = fptosi float %146 to i32
  %148 = load ptr, ptr %2, align 4
  %149 = getelementptr inbounds %struct.EG, ptr %148, i32 0, i32 4
  store i32 %147, ptr %149, align 4
  br label %160

150:                                              ; preds = %1
  %151 = load ptr, ptr %2, align 4
  %152 = getelementptr inbounds %struct.EG, ptr %151, i32 0, i32 3
  %153 = load i32, ptr %152, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, ptr %152, align 4
  %155 = load ptr, ptr %2, align 4
  %156 = getelementptr inbounds %struct.EG, ptr %155, i32 0, i32 4
  store i32 0, ptr %156, align 4
  %157 = load ptr, ptr %2, align 4
  %158 = getelementptr inbounds %struct.EG, ptr %157, i32 0, i32 0
  store float -1.000000e+03, ptr %158, align 4
  br label %160

159:                                              ; preds = %1
  br label %160

160:                                              ; preds = %7, %1, %159, %150, %122, %117, %89, %77, %48, %24
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @gmemcpy(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca ptr, align 4
  %5 = alloca ptr, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store ptr %0, ptr %4, align 4
  store ptr %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  store i32 0, ptr %7, align 4
  br label %8

8:                                                ; preds = %20, %3
  %9 = load i32, ptr %7, align 4
  %10 = load i32, ptr %6, align 4
  %11 = icmp ult i32 %9, %10
  br i1 %11, label %12, label %23

12:                                               ; preds = %8
  %13 = load ptr, ptr %5, align 4
  %14 = load i32, ptr %7, align 4
  %15 = getelementptr inbounds i8, ptr %13, i32 %14
  %16 = load i8, ptr %15, align 1
  %17 = load ptr, ptr %4, align 4
  %18 = load i32, ptr %7, align 4
  %19 = getelementptr inbounds i8, ptr %17, i32 %18
  store i8 %16, ptr %19, align 1
  br label %20

20:                                               ; preds = %12
  %21 = load i32, ptr %7, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, ptr %7, align 4
  br label %8, !llvm.loop !4

23:                                               ; preds = %8
  %24 = load ptr, ptr %4, align 4
  ret ptr %24
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleTc(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store ptr %0, ptr %3, align 4
  store i32 %1, ptr %4, align 4
  %6 = load i32, ptr %4, align 4
  %7 = uitofp i32 %6 to float
  %8 = fdiv float 4.410000e+04, %7
  store float %8, ptr %5, align 4
  %9 = load float, ptr %5, align 4
  %10 = load ptr, ptr %3, align 4
  %11 = getelementptr inbounds %struct.EG, ptr %10, i32 0, i32 6
  %12 = load i16, ptr %11, align 2
  %13 = sitofp i16 %12 to float
  %14 = fmul float %13, %9
  %15 = fptosi float %14 to i16
  store i16 %15, ptr %11, align 2
  %16 = load float, ptr %5, align 4
  %17 = load ptr, ptr %3, align 4
  %18 = getelementptr inbounds %struct.EG, ptr %17, i32 0, i32 5
  %19 = load i16, ptr %18, align 4
  %20 = sitofp i16 %19 to float
  %21 = fmul float %20, %16
  %22 = fptosi float %21 to i16
  store i16 %22, ptr %18, align 4
  %23 = load float, ptr %5, align 4
  %24 = load ptr, ptr %3, align 4
  %25 = getelementptr inbounds %struct.EG, ptr %24, i32 0, i32 8
  %26 = load i16, ptr %25, align 2
  %27 = sitofp i16 %26 to float
  %28 = fmul float %27, %23
  %29 = fptosi float %28 to i16
  store i16 %29, ptr %25, align 2
  %30 = load float, ptr %5, align 4
  %31 = load ptr, ptr %3, align 4
  %32 = getelementptr inbounds %struct.EG, ptr %31, i32 0, i32 10
  %33 = load i16, ptr %32, align 2
  %34 = sitofp i16 %33 to float
  %35 = fmul float %34, %30
  %36 = fptosi float %35 to i16
  store i16 %36, ptr %32, align 2
  %37 = load float, ptr %5, align 4
  %38 = load ptr, ptr %3, align 4
  %39 = getelementptr inbounds %struct.EG, ptr %38, i32 0, i32 7
  %40 = load i16, ptr %39, align 4
  %41 = sitofp i16 %40 to float
  %42 = fmul float %41, %37
  %43 = fptosi float %42 to i16
  store i16 %43, ptr %39, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init_vol_eg(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca ptr, align 4
  %5 = alloca ptr, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 4
  store ptr %0, ptr %4, align 4
  store ptr %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %8 = load ptr, ptr %5, align 4
  %9 = getelementptr inbounds %struct.zone_t, ptr %8, i32 0, i32 33
  store ptr %9, ptr %7, align 4
  %10 = load ptr, ptr %4, align 4
  %11 = getelementptr inbounds %struct.EG, ptr %10, i32 0, i32 5
  %12 = load ptr, ptr %7, align 4
  %13 = call ptr @gmemcpy(ptr noundef %11, ptr noundef %12, i32 noundef 12)
  %14 = load ptr, ptr %4, align 4
  %15 = load i32, ptr %6, align 4
  call void @scaleTc(ptr noundef %14, i32 noundef %15)
  %16 = load ptr, ptr %4, align 4
  %17 = getelementptr inbounds %struct.EG, ptr %16, i32 0, i32 3
  store i32 1, ptr %17, align 4
  %18 = load ptr, ptr %4, align 4
  %19 = getelementptr inbounds %struct.EG, ptr %18, i32 0, i32 6
  %20 = load i16, ptr %19, align 2
  %21 = sext i16 %20 to i32
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %3
  %24 = load ptr, ptr %4, align 4
  %25 = getelementptr inbounds %struct.EG, ptr %24, i32 0, i32 6
  store i16 0, ptr %25, align 2
  br label %26

26:                                               ; preds = %23, %3
  %27 = load ptr, ptr %4, align 4
  call void @advanceStage(ptr noundef %27)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init_mod_eg(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca ptr, align 4
  %5 = alloca ptr, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 4
  store ptr %0, ptr %4, align 4
  store ptr %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %8 = load ptr, ptr %5, align 4
  %9 = getelementptr inbounds %struct.zone_t, ptr %8, i32 0, i32 25
  store ptr %9, ptr %7, align 4
  %10 = load ptr, ptr %4, align 4
  %11 = getelementptr inbounds %struct.EG, ptr %10, i32 0, i32 5
  %12 = load ptr, ptr %7, align 4
  %13 = call ptr @gmemcpy(ptr noundef %11, ptr noundef %12, i32 noundef 12)
  %14 = load ptr, ptr %4, align 4
  %15 = load i32, ptr %6, align 4
  call void @scaleTc(ptr noundef %14, i32 noundef %15)
  %16 = load ptr, ptr %4, align 4
  %17 = getelementptr inbounds %struct.EG, ptr %16, i32 0, i32 3
  store i32 1, ptr %17, align 4
  %18 = load ptr, ptr %4, align 4
  %19 = getelementptr inbounds %struct.EG, ptr %18, i32 0, i32 2
  store i32 0, ptr %19, align 4
  %20 = load ptr, ptr %4, align 4
  call void @advanceStage(ptr noundef %20)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @_eg_set_stage(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca i32, align 4
  store ptr %0, ptr %3, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  %6 = sub nsw i32 %5, 1
  %7 = load ptr, ptr %3, align 4
  %8 = getelementptr inbounds %struct.EG, ptr %7, i32 0, i32 3
  store i32 %6, ptr %8, align 4
  %9 = load ptr, ptr %3, align 4
  %10 = getelementptr inbounds %struct.EG, ptr %9, i32 0, i32 4
  store i32 0, ptr %10, align 4
  %11 = load ptr, ptr %3, align 4
  call void @advanceStage(ptr noundef %11)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @_eg_release(ptr noundef %0) #0 {
  %2 = alloca ptr, align 4
  store ptr %0, ptr %2, align 4
  %3 = load ptr, ptr %2, align 4
  %4 = getelementptr inbounds %struct.EG, ptr %3, i32 0, i32 3
  %5 = load i32, ptr %4, align 4
  %6 = icmp sge i32 %5, 7
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = load ptr, ptr %2, align 4
  %9 = getelementptr inbounds %struct.EG, ptr %8, i32 0, i32 3
  %10 = load i32, ptr %9, align 4
  %11 = icmp sle i32 %10, 3
  br i1 %11, label %12, label %13

12:                                               ; preds = %7, %1
  br label %20

13:                                               ; preds = %7
  %14 = load ptr, ptr %2, align 4
  %15 = getelementptr inbounds %struct.EG, ptr %14, i32 0, i32 4
  store i32 0, ptr %15, align 4
  %16 = load ptr, ptr %2, align 4
  %17 = getelementptr inbounds %struct.EG, ptr %16, i32 0, i32 2
  store i32 1, ptr %17, align 4
  %18 = load ptr, ptr %2, align 4
  %19 = getelementptr inbounds %struct.EG, ptr %18, i32 0, i32 3
  store i32 6, ptr %19, align 4
  br label %20

20:                                               ; preds = %13, %12
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sp_byte_len() #0 {
  ret i32 64
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @spRef(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %3
  ret ptr %4
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @pcmRef(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = getelementptr inbounds [2222 x %struct.pcm_t], ptr @pcms, i32 0, i32 %3
  ret ptr %4
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @zoneRef(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = getelementptr inbounds [4096 x %struct.zone_t], ptr @zones, i32 0, i32 %3
  ret ptr %4
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @get_available_spinner(i32 noundef %0) #0 {
  %2 = alloca ptr, align 4
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 4
  %5 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  store i32 0, ptr %5, align 4
  br label %6

6:                                                ; preds = %50, %1
  %7 = load i32, ptr %5, align 4
  %8 = icmp slt i32 %7, 64
  br i1 %8, label %9, label %53

9:                                                ; preds = %6
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %10
  %12 = getelementptr inbounds %struct.spinner, ptr %11, i32 0, i32 11
  %13 = load ptr, ptr %12, align 4
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %26

15:                                               ; preds = %9
  %16 = load i32, ptr %5, align 4
  %17 = call ptr @newSpinner(i32 noundef %16)
  store ptr %17, ptr %4, align 4
  %18 = load i32, ptr %3, align 4
  %19 = load ptr, ptr %4, align 4
  %20 = getelementptr inbounds %struct.spinner, ptr %19, i32 0, i32 5
  store i32 %18, ptr %20, align 4
  %21 = load ptr, ptr %4, align 4
  %22 = getelementptr inbounds %struct.spinner, ptr %21, i32 0, i32 11
  %23 = load ptr, ptr %22, align 4
  %24 = getelementptr inbounds %struct.EG, ptr %23, i32 0, i32 3
  store i32 1, ptr %24, align 4
  %25 = load ptr, ptr %4, align 4
  store ptr %25, ptr %2, align 4
  br label %54

26:                                               ; preds = %9
  %27 = load i32, ptr %5, align 4
  %28 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %27
  %29 = getelementptr inbounds %struct.spinner, ptr %28, i32 0, i32 11
  %30 = load ptr, ptr %29, align 4
  %31 = getelementptr inbounds %struct.EG, ptr %30, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %26
  %35 = load i32, ptr %5, align 4
  %36 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %35
  %37 = getelementptr inbounds %struct.spinner, ptr %36, i32 0, i32 11
  %38 = load ptr, ptr %37, align 4
  %39 = getelementptr inbounds %struct.EG, ptr %38, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = icmp eq i32 %40, 99
  br i1 %41, label %42, label %49

42:                                               ; preds = %34, %26
  %43 = load i32, ptr %5, align 4
  %44 = getelementptr inbounds %struct.spinner, ptr @sps, i32 %43
  store ptr %44, ptr %4, align 4
  %45 = load i32, ptr %3, align 4
  %46 = load ptr, ptr %4, align 4
  %47 = getelementptr inbounds %struct.spinner, ptr %46, i32 0, i32 5
  store i32 %45, ptr %47, align 4
  %48 = load ptr, ptr %4, align 4
  store ptr %48, ptr %2, align 4
  br label %54

49:                                               ; preds = %34
  br label %50

50:                                               ; preds = %49
  %51 = load i32, ptr %5, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, ptr %5, align 4
  br label %6, !llvm.loop !5

53:                                               ; preds = %6
  store ptr null, ptr %2, align 4
  br label %54

54:                                               ; preds = %53, %42, %15
  %55 = load ptr, ptr %2, align 4
  ret ptr %55
}

; Function Attrs: noinline nounwind optnone
define hidden ptr @newSpinner(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 4
  store i32 %0, ptr %2, align 4
  %4 = load i32, ptr %2, align 4
  %5 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %4
  store ptr %5, ptr %3, align 4
  %6 = load i32, ptr %2, align 4
  %7 = mul nsw i32 %6, 128
  %8 = mul nsw i32 %7, 2
  %9 = getelementptr inbounds [16384 x float], ptr @outputs, i32 0, i32 %8
  %10 = load ptr, ptr %3, align 4
  %11 = getelementptr inbounds %struct.spinner, ptr %10, i32 0, i32 1
  store ptr %9, ptr %11, align 4
  %12 = load ptr, ptr %3, align 4
  %13 = getelementptr inbounds %struct.spinner, ptr %12, i32 0, i32 0
  store ptr @silence, ptr %13, align 4
  %14 = load ptr, ptr %3, align 4
  %15 = getelementptr inbounds %struct.spinner, ptr %14, i32 0, i32 4
  store i32 36, ptr %15, align 4
  %16 = load ptr, ptr %3, align 4
  %17 = getelementptr inbounds %struct.spinner, ptr %16, i32 0, i32 3
  store i32 4, ptr %17, align 4
  %18 = load ptr, ptr %3, align 4
  %19 = getelementptr inbounds %struct.spinner, ptr %18, i32 0, i32 8
  store float 0.000000e+00, ptr %19, align 4
  %20 = load ptr, ptr %3, align 4
  %21 = getelementptr inbounds %struct.spinner, ptr %20, i32 0, i32 2
  store i32 0, ptr %21, align 4
  %22 = load i32, ptr %2, align 4
  %23 = mul nsw i32 %22, 2
  %24 = getelementptr inbounds [128 x %struct.EG], ptr @eg, i32 0, i32 %23
  %25 = load ptr, ptr %3, align 4
  %26 = getelementptr inbounds %struct.spinner, ptr %25, i32 0, i32 11
  store ptr %24, ptr %26, align 4
  %27 = load i32, ptr %2, align 4
  %28 = mul nsw i32 %27, 2
  %29 = add nsw i32 %28, 1
  %30 = getelementptr inbounds [128 x %struct.EG], ptr @eg, i32 0, i32 %29
  %31 = load ptr, ptr %3, align 4
  %32 = getelementptr inbounds %struct.spinner, ptr %31, i32 0, i32 12
  store ptr %30, ptr %32, align 4
  %33 = load i32, ptr %2, align 4
  %34 = mul nsw i32 %33, 2
  %35 = getelementptr inbounds [128 x %struct.LFO], ptr @lfos, i32 0, i32 %34
  %36 = load ptr, ptr %3, align 4
  %37 = getelementptr inbounds %struct.spinner, ptr %36, i32 0, i32 13
  store ptr %35, ptr %37, align 4
  %38 = load i32, ptr %2, align 4
  %39 = mul nsw i32 %38, 2
  %40 = add nsw i32 %39, 1
  %41 = getelementptr inbounds [128 x %struct.LFO], ptr @lfos, i32 0, i32 %40
  %42 = load ptr, ptr %3, align 4
  %43 = getelementptr inbounds %struct.spinner, ptr %42, i32 0, i32 14
  store ptr %41, ptr %43, align 4
  %44 = load ptr, ptr %3, align 4
  %45 = getelementptr inbounds %struct.spinner, ptr %44, i32 0, i32 11
  %46 = load ptr, ptr %45, align 4
  %47 = getelementptr inbounds %struct.EG, ptr %46, i32 0, i32 0
  store float -9.600000e+02, ptr %47, align 4
  %48 = load ptr, ptr %3, align 4
  %49 = getelementptr inbounds %struct.spinner, ptr %48, i32 0, i32 11
  %50 = load ptr, ptr %49, align 4
  %51 = getelementptr inbounds %struct.EG, ptr %50, i32 0, i32 3
  store i32 1, ptr %51, align 4
  %52 = load ptr, ptr %3, align 4
  %53 = getelementptr inbounds %struct.spinner, ptr %52, i32 0, i32 11
  %54 = load ptr, ptr %53, align 4
  %55 = getelementptr inbounds %struct.EG, ptr %54, i32 0, i32 1
  store float 0.000000e+00, ptr %55, align 4
  %56 = load i32, ptr %2, align 4
  %57 = load ptr, ptr %3, align 4
  %58 = getelementptr inbounds %struct.spinner, ptr %57, i32 0, i32 5
  store i32 %56, ptr %58, align 4
  %59 = load ptr, ptr %3, align 4
  %60 = getelementptr inbounds %struct.spinner, ptr %59, i32 0, i32 11
  %61 = load ptr, ptr %60, align 4
  %62 = getelementptr inbounds %struct.EG, ptr %61, i32 0, i32 3
  store i32 0, ptr %62, align 4
  %63 = load ptr, ptr %3, align 4
  ret ptr %63
}

; Function Attrs: noinline nounwind optnone
define hidden void @gm_reset() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  br label %3

3:                                                ; preds = %19, %0
  %4 = load i32, ptr %1, align 4
  %5 = icmp slt i32 %4, 128
  br i1 %5, label %6, label %22

6:                                                ; preds = %3
  %7 = load i32, ptr %1, align 4
  %8 = mul nsw i32 %7, 16
  %9 = add nsw i32 %8, 7
  %10 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %9
  store i8 100, ptr %10, align 1
  %11 = load i32, ptr %1, align 4
  %12 = mul nsw i32 %11, 16
  %13 = add nsw i32 %12, 10
  %14 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %13
  store i8 64, ptr %14, align 1
  %15 = load i32, ptr %1, align 4
  %16 = mul nsw i32 %15, 16
  %17 = add nsw i32 %16, 11
  %18 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %17
  store i8 127, ptr %18, align 1
  br label %19

19:                                               ; preds = %6
  %20 = load i32, ptr %1, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %1, align 4
  br label %3, !llvm.loop !6

22:                                               ; preds = %3
  store i32 0, ptr %2, align 4
  br label %23

23:                                               ; preds = %29, %22
  %24 = load i32, ptr %2, align 4
  %25 = icmp slt i32 %24, 64
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = load i32, ptr %2, align 4
  %28 = getelementptr inbounds [64 x %struct.spinner], ptr @sps, i32 0, i32 %27
  call void @reset(ptr noundef %28)
  br label %29

29:                                               ; preds = %26
  %30 = load i32, ptr %2, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, ptr %2, align 4
  br label %23, !llvm.loop !7

32:                                               ; preds = %23
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @reset(ptr noundef %0) #0 {
  %2 = alloca ptr, align 4
  store ptr %0, ptr %2, align 4
  %3 = load ptr, ptr %2, align 4
  %4 = getelementptr inbounds %struct.spinner, ptr %3, i32 0, i32 2
  store i32 0, ptr %4, align 4
  %5 = load ptr, ptr %2, align 4
  %6 = getelementptr inbounds %struct.spinner, ptr %5, i32 0, i32 8
  store float 0.000000e+00, ptr %6, align 4
  %7 = load ptr, ptr %2, align 4
  %8 = getelementptr inbounds %struct.spinner, ptr %7, i32 0, i32 0
  store ptr @silence, ptr %8, align 4
  %9 = load ptr, ptr %2, align 4
  %10 = getelementptr inbounds %struct.spinner, ptr %9, i32 0, i32 13
  %11 = load ptr, ptr %10, align 4
  %12 = getelementptr inbounds %struct.LFO, ptr %11, i32 0, i32 0
  store i16 0, ptr %12, align 2
  %13 = load ptr, ptr %2, align 4
  %14 = getelementptr inbounds %struct.spinner, ptr %13, i32 0, i32 14
  %15 = load ptr, ptr %14, align 4
  %16 = getelementptr inbounds %struct.LFO, ptr %15, i32 0, i32 0
  store i16 0, ptr %16, align 2
  %17 = load ptr, ptr %2, align 4
  %18 = getelementptr inbounds %struct.spinner, ptr %17, i32 0, i32 11
  %19 = load ptr, ptr %18, align 4
  %20 = getelementptr inbounds %struct.EG, ptr %19, i32 0, i32 3
  store i32 0, ptr %20, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @eg_release(ptr noundef %0) #0 {
  %2 = alloca ptr, align 4
  store ptr %0, ptr %2, align 4
  %3 = load ptr, ptr %2, align 4
  %4 = getelementptr inbounds %struct.spinner, ptr %3, i32 0, i32 11
  %5 = load ptr, ptr %4, align 4
  call void @_eg_release(ptr noundef %5)
  %6 = load ptr, ptr %2, align 4
  %7 = getelementptr inbounds %struct.spinner, ptr %6, i32 0, i32 12
  %8 = load ptr, ptr %7, align 4
  call void @_eg_release(ptr noundef %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @set_midi_cc_val(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %7 = load i32, ptr %6, align 4
  %8 = and i32 %7, 127
  %9 = trunc i32 %8 to i8
  %10 = load i32, ptr %4, align 4
  %11 = mul nsw i32 %10, 128
  %12 = load i32, ptr %5, align 4
  %13 = add nsw i32 %11, %12
  %14 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %13
  store i8 %9, ptr %14, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @lfo_effects(ptr noalias sret(%struct.LFOEffects) align 4 %0, float noundef %1, ptr noundef %2) #0 {
  %4 = alloca float, align 4
  %5 = alloca ptr, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  store float %1, ptr %4, align 4
  store ptr %2, ptr %5, align 4
  %9 = load float, ptr %4, align 4
  %10 = fsub float 1.000000e+00, %9
  %11 = load ptr, ptr %5, align 4
  %12 = getelementptr inbounds %struct.zone_t, ptr %11, i32 0, i32 13
  %13 = load i16, ptr %12, align 2
  %14 = sext i16 %13 to i32
  %15 = sitofp i32 %14 to float
  %16 = fmul float %10, %15
  store float %16, ptr %6, align 4
  %17 = load float, ptr %4, align 4
  %18 = load ptr, ptr %5, align 4
  %19 = getelementptr inbounds %struct.zone_t, ptr %18, i32 0, i32 7
  %20 = load i16, ptr %19, align 2
  %21 = sext i16 %20 to i32
  %22 = sitofp i32 %21 to float
  %23 = fmul float %17, %22
  store float %23, ptr %7, align 4
  %24 = load float, ptr %4, align 4
  %25 = load ptr, ptr %5, align 4
  %26 = getelementptr inbounds %struct.zone_t, ptr %25, i32 0, i32 11
  %27 = load i16, ptr %26, align 2
  %28 = sext i16 %27 to i32
  %29 = sitofp i32 %28 to float
  %30 = fmul float %24, %29
  %31 = fmul float %30, 0x40219999A0000000
  store float %31, ptr %8, align 4
  %32 = getelementptr inbounds %struct.LFOEffects, ptr %0, i32 0, i32 0
  %33 = load float, ptr %6, align 4
  store float %33, ptr %32, align 4
  %34 = getelementptr inbounds %struct.LFOEffects, ptr %0, i32 0, i32 1
  %35 = load float, ptr %7, align 4
  store float %35, ptr %34, align 4
  %36 = getelementptr inbounds %struct.LFOEffects, ptr %0, i32 0, i32 2
  %37 = load float, ptr %8, align 4
  store float %37, ptr %36, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @trigger_attack(ptr noundef %0, float noundef %1, i32 noundef %2) #0 {
  %4 = alloca ptr, align 4
  %5 = alloca float, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 4
  %8 = alloca ptr, align 4
  store ptr %0, ptr %4, align 4
  store float %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %9 = load float, ptr %5, align 4
  %10 = load ptr, ptr %4, align 4
  %11 = getelementptr inbounds %struct.spinner, ptr %10, i32 0, i32 9
  store float %9, ptr %11, align 4
  %12 = load i32, ptr %6, align 4
  %13 = and i32 %12, 127
  %14 = load ptr, ptr %4, align 4
  %15 = getelementptr inbounds %struct.spinner, ptr %14, i32 0, i32 7
  store i32 %13, ptr %15, align 4
  %16 = load ptr, ptr %4, align 4
  %17 = getelementptr inbounds %struct.spinner, ptr %16, i32 0, i32 10
  %18 = load ptr, ptr %17, align 4
  store ptr %18, ptr %7, align 4
  %19 = load ptr, ptr %4, align 4
  %20 = getelementptr inbounds %struct.spinner, ptr %19, i32 0, i32 10
  %21 = load ptr, ptr %20, align 4
  %22 = getelementptr inbounds %struct.zone_t, ptr %21, i32 0, i32 53
  %23 = load i16, ptr %22, align 2
  %24 = sext i16 %23 to i32
  %25 = getelementptr inbounds %struct.pcm_t, ptr @pcms, i32 %24
  store ptr %25, ptr %8, align 4
  %26 = load ptr, ptr %7, align 4
  %27 = getelementptr inbounds %struct.zone_t, ptr %26, i32 0, i32 0
  %28 = load i16, ptr %27, align 2
  %29 = zext i16 %28 to i32
  %30 = load ptr, ptr %7, align 4
  %31 = getelementptr inbounds %struct.zone_t, ptr %30, i32 0, i32 4
  %32 = load i16, ptr %31, align 2
  %33 = zext i16 %32 to i32
  %34 = shl i32 %33, 15
  %35 = add nsw i32 %29, %34
  %36 = load ptr, ptr %4, align 4
  %37 = getelementptr inbounds %struct.spinner, ptr %36, i32 0, i32 2
  store i32 %35, ptr %37, align 4
  %38 = load ptr, ptr %8, align 4
  %39 = getelementptr inbounds %struct.pcm_t, ptr %38, i32 0, i32 5
  %40 = load ptr, ptr %39, align 4
  %41 = load ptr, ptr %4, align 4
  %42 = getelementptr inbounds %struct.spinner, ptr %41, i32 0, i32 0
  store ptr %40, ptr %42, align 4
  %43 = load ptr, ptr %4, align 4
  %44 = getelementptr inbounds %struct.spinner, ptr %43, i32 0, i32 2
  store i32 0, ptr %44, align 4
  %45 = load ptr, ptr %4, align 4
  %46 = getelementptr inbounds %struct.spinner, ptr %45, i32 0, i32 8
  store float 0.000000e+00, ptr %46, align 4
  %47 = load ptr, ptr %4, align 4
  %48 = getelementptr inbounds %struct.spinner, ptr %47, i32 0, i32 11
  %49 = load ptr, ptr %48, align 4
  %50 = getelementptr inbounds %struct.EG, ptr %49, i32 0, i32 3
  store i32 1, ptr %50, align 4
  %51 = load ptr, ptr %4, align 4
  %52 = getelementptr inbounds %struct.spinner, ptr %51, i32 0, i32 12
  %53 = load ptr, ptr %52, align 4
  %54 = load ptr, ptr %7, align 4
  %55 = load ptr, ptr %8, align 4
  %56 = getelementptr inbounds %struct.pcm_t, ptr %55, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  call void @init_mod_eg(ptr noundef %53, ptr noundef %54, i32 noundef %57)
  %58 = load ptr, ptr %4, align 4
  %59 = getelementptr inbounds %struct.spinner, ptr %58, i32 0, i32 11
  %60 = load ptr, ptr %59, align 4
  %61 = load ptr, ptr %7, align 4
  %62 = load ptr, ptr %8, align 4
  %63 = getelementptr inbounds %struct.pcm_t, ptr %62, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  call void @init_vol_eg(ptr noundef %60, ptr noundef %61, i32 noundef %64)
  %65 = load ptr, ptr %7, align 4
  %66 = getelementptr inbounds %struct.zone_t, ptr %65, i32 0, i32 21
  %67 = load i16, ptr %66, align 2
  %68 = call i32 @timecent2sample(i16 noundef signext %67)
  %69 = trunc i32 %68 to i16
  %70 = load ptr, ptr %4, align 4
  %71 = getelementptr inbounds %struct.spinner, ptr %70, i32 0, i32 13
  %72 = load ptr, ptr %71, align 4
  %73 = getelementptr inbounds %struct.LFO, ptr %72, i32 0, i32 2
  store i16 %69, ptr %73, align 2
  %74 = load ptr, ptr %7, align 4
  %75 = getelementptr inbounds %struct.zone_t, ptr %74, i32 0, i32 21
  %76 = load i16, ptr %75, align 2
  %77 = call i32 @timecent2sample(i16 noundef signext %76)
  %78 = trunc i32 %77 to i16
  %79 = load ptr, ptr %4, align 4
  %80 = getelementptr inbounds %struct.spinner, ptr %79, i32 0, i32 14
  %81 = load ptr, ptr %80, align 4
  %82 = getelementptr inbounds %struct.LFO, ptr %81, i32 0, i32 2
  store i16 %78, ptr %82, align 2
  %83 = load ptr, ptr %4, align 4
  %84 = getelementptr inbounds %struct.spinner, ptr %83, i32 0, i32 13
  %85 = load ptr, ptr %84, align 4
  %86 = load ptr, ptr %7, align 4
  %87 = getelementptr inbounds %struct.zone_t, ptr %86, i32 0, i32 22
  %88 = load i16, ptr %87, align 2
  call void @set_frequency(ptr noundef %85, i16 noundef signext %88)
  %89 = load ptr, ptr %4, align 4
  %90 = getelementptr inbounds %struct.spinner, ptr %89, i32 0, i32 14
  %91 = load ptr, ptr %90, align 4
  %92 = load ptr, ptr %7, align 4
  %93 = getelementptr inbounds %struct.zone_t, ptr %92, i32 0, i32 24
  %94 = load i16, ptr %93, align 2
  call void @set_frequency(ptr noundef %91, i16 noundef signext %94)
  %95 = load ptr, ptr %4, align 4
  %96 = getelementptr inbounds %struct.spinner, ptr %95, i32 0, i32 9
  %97 = load float, ptr %96, align 4
  ret float %97
}

; Function Attrs: noinline nounwind optnone
define hidden void @set_spinner_zone(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca ptr, align 4
  %5 = alloca ptr, align 4
  store ptr %0, ptr %3, align 4
  store ptr %1, ptr %4, align 4
  %6 = load ptr, ptr %4, align 4
  %7 = getelementptr inbounds %struct.zone_t, ptr %6, i32 0, i32 53
  %8 = load i16, ptr %7, align 2
  %9 = sext i16 %8 to i32
  %10 = getelementptr inbounds %struct.pcm_t, ptr @pcms, i32 %9
  store ptr %10, ptr %5, align 4
  %11 = load ptr, ptr %4, align 4
  %12 = getelementptr inbounds %struct.zone_t, ptr %11, i32 0, i32 0
  %13 = load i16, ptr %12, align 2
  %14 = zext i16 %13 to i32
  %15 = load ptr, ptr %4, align 4
  %16 = getelementptr inbounds %struct.zone_t, ptr %15, i32 0, i32 4
  %17 = load i16, ptr %16, align 2
  %18 = zext i16 %17 to i32
  %19 = shl i32 %18, 15
  %20 = add nsw i32 %14, %19
  %21 = load ptr, ptr %3, align 4
  %22 = getelementptr inbounds %struct.spinner, ptr %21, i32 0, i32 2
  store i32 %20, ptr %22, align 4
  %23 = load ptr, ptr %5, align 4
  %24 = getelementptr inbounds %struct.pcm_t, ptr %23, i32 0, i32 0
  %25 = load i32, ptr %24, align 4
  %26 = load ptr, ptr %4, align 4
  %27 = getelementptr inbounds %struct.zone_t, ptr %26, i32 0, i32 2
  %28 = load i16, ptr %27, align 2
  %29 = zext i16 %28 to i32
  %30 = add i32 %25, %29
  %31 = load ptr, ptr %4, align 4
  %32 = getelementptr inbounds %struct.zone_t, ptr %31, i32 0, i32 45
  %33 = load i16, ptr %32, align 2
  %34 = zext i16 %33 to i32
  %35 = shl i32 %34, 15
  %36 = add i32 %30, %35
  %37 = load ptr, ptr %3, align 4
  %38 = getelementptr inbounds %struct.spinner, ptr %37, i32 0, i32 3
  store i32 %36, ptr %38, align 4
  %39 = load ptr, ptr %5, align 4
  %40 = getelementptr inbounds %struct.pcm_t, ptr %39, i32 0, i32 1
  %41 = load i32, ptr %40, align 4
  %42 = load ptr, ptr %4, align 4
  %43 = getelementptr inbounds %struct.zone_t, ptr %42, i32 0, i32 1
  %44 = load i16, ptr %43, align 2
  %45 = zext i16 %44 to i32
  %46 = add i32 %41, %45
  %47 = load ptr, ptr %4, align 4
  %48 = getelementptr inbounds %struct.zone_t, ptr %47, i32 0, i32 50
  %49 = load i16, ptr %48, align 2
  %50 = zext i16 %49 to i32
  %51 = shl i32 %50, 15
  %52 = add i32 %46, %51
  %53 = load ptr, ptr %3, align 4
  %54 = getelementptr inbounds %struct.spinner, ptr %53, i32 0, i32 4
  store i32 %52, ptr %54, align 4
  %55 = load ptr, ptr %5, align 4
  %56 = getelementptr inbounds %struct.pcm_t, ptr %55, i32 0, i32 5
  %57 = load ptr, ptr %56, align 4
  %58 = load ptr, ptr %3, align 4
  %59 = getelementptr inbounds %struct.spinner, ptr %58, i32 0, i32 0
  store ptr %57, ptr %59, align 4
  %60 = load ptr, ptr %4, align 4
  %61 = load ptr, ptr %3, align 4
  %62 = getelementptr inbounds %struct.spinner, ptr %61, i32 0, i32 10
  store ptr %60, ptr %62, align 4
  %63 = load ptr, ptr %5, align 4
  %64 = getelementptr inbounds %struct.pcm_t, ptr %63, i32 0, i32 5
  %65 = load ptr, ptr %64, align 4
  %66 = load ptr, ptr %3, align 4
  %67 = getelementptr inbounds %struct.spinner, ptr %66, i32 0, i32 0
  store ptr %65, ptr %67, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @lerp(float noundef %0, float noundef %1, float noundef %2) #0 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  store float %0, ptr %4, align 4
  store float %1, ptr %5, align 4
  store float %2, ptr %6, align 4
  %7 = load float, ptr %4, align 4
  %8 = load float, ptr %5, align 4
  %9 = load float, ptr %4, align 4
  %10 = fsub float %8, %9
  %11 = load float, ptr %6, align 4
  %12 = call float @llvm.fmuladd.f32(float %10, float %11, float %7)
  ret float %12
}

; Function Attrs: noinline nounwind optnone
define hidden float @kRateAttenuate(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store ptr %0, ptr %3, align 4
  store i32 %1, ptr %4, align 4
  store float 0.000000e+00, ptr %5, align 4
  %6 = load ptr, ptr %3, align 4
  %7 = getelementptr inbounds %struct.spinner, ptr %6, i32 0, i32 10
  %8 = load ptr, ptr %7, align 4
  %9 = getelementptr inbounds %struct.zone_t, ptr %8, i32 0, i32 48
  %10 = load i16, ptr %9, align 2
  %11 = sitofp i16 %10 to float
  %12 = fdiv float %11, 4.000000e+00
  %13 = load float, ptr %5, align 4
  %14 = fsub float %13, %12
  store float %14, ptr %5, align 4
  %15 = load i32, ptr %4, align 4
  %16 = mul nsw i32 %15, 128
  %17 = add nsw i32 %16, 7
  %18 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %17
  %19 = load i8, ptr %18, align 1
  %20 = sext i8 %19 to i32
  %21 = call double @midi_volume_log10(i32 noundef %20)
  %22 = fdiv double %21, 4.000000e+00
  %23 = load float, ptr %5, align 4
  %24 = fpext float %23 to double
  %25 = fsub double %24, %22
  %26 = fptrunc double %25 to float
  store float %26, ptr %5, align 4
  %27 = load ptr, ptr %3, align 4
  %28 = getelementptr inbounds %struct.spinner, ptr %27, i32 0, i32 11
  %29 = load ptr, ptr %28, align 4
  %30 = getelementptr inbounds %struct.EG, ptr %29, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = icmp sgt i32 %31, 5
  br i1 %32, label %33, label %45

33:                                               ; preds = %2
  %34 = load i32, ptr %4, align 4
  %35 = mul nsw i32 %34, 128
  %36 = add nsw i32 %35, 11
  %37 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %36
  %38 = load i8, ptr %37, align 1
  %39 = sext i8 %38 to i32
  %40 = call double @midi_volume_log10(i32 noundef %39)
  %41 = load float, ptr %5, align 4
  %42 = fpext float %41 to double
  %43 = fsub double %42, %40
  %44 = fptrunc double %43 to float
  store float %44, ptr %5, align 4
  br label %45

45:                                               ; preds = %33, %2
  %46 = load ptr, ptr %3, align 4
  %47 = getelementptr inbounds %struct.spinner, ptr %46, i32 0, i32 7
  %48 = load i32, ptr %47, align 4
  %49 = call double @midi_volume_log10(i32 noundef %48)
  %50 = fdiv double %49, 4.000000e+00
  %51 = load float, ptr %5, align 4
  %52 = fpext float %51 to double
  %53 = fsub double %52, %50
  %54 = fptrunc double %53 to float
  store float %54, ptr %5, align 4
  %55 = load float, ptr %5, align 4
  ret float %55
}

; Function Attrs: noinline nounwind optnone
define hidden void @_spinblock(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca ptr, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca %struct.LFOEffects, align 4
  %12 = alloca %struct.LFOEffects, align 4
  %13 = alloca i32, align 4
  %14 = alloca float, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca double, align 8
  %18 = alloca float, align 4
  %19 = alloca i32, align 4
  %20 = alloca float, align 4
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca i32, align 4
  %24 = alloca float, align 4
  store ptr %0, ptr %4, align 4
  store i32 %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %25 = load ptr, ptr %4, align 4
  %26 = getelementptr inbounds %struct.spinner, ptr %25, i32 0, i32 13
  %27 = load ptr, ptr %26, align 4
  %28 = call float @roll(ptr noundef %27, i32 noundef 64)
  store float %28, ptr %9, align 4
  %29 = load ptr, ptr %4, align 4
  %30 = getelementptr inbounds %struct.spinner, ptr %29, i32 0, i32 14
  %31 = load ptr, ptr %30, align 4
  %32 = call float @roll(ptr noundef %31, i32 noundef 64)
  store float %32, ptr %10, align 4
  %33 = load float, ptr %9, align 4
  %34 = load ptr, ptr %4, align 4
  %35 = getelementptr inbounds %struct.spinner, ptr %34, i32 0, i32 10
  %36 = load ptr, ptr %35, align 4
  call void @lfo_effects(ptr sret(%struct.LFOEffects) align 4 %11, float noundef %33, ptr noundef %36)
  %37 = load float, ptr %10, align 4
  %38 = load ptr, ptr %4, align 4
  %39 = getelementptr inbounds %struct.spinner, ptr %38, i32 0, i32 10
  %40 = load ptr, ptr %39, align 4
  call void @lfo_effects(ptr sret(%struct.LFOEffects) align 4 %12, float noundef %37, ptr noundef %40)
  %41 = load ptr, ptr %4, align 4
  %42 = getelementptr inbounds %struct.spinner, ptr %41, i32 0, i32 2
  %43 = load i32, ptr %42, align 4
  store i32 %43, ptr %13, align 4
  %44 = load ptr, ptr %4, align 4
  %45 = getelementptr inbounds %struct.spinner, ptr %44, i32 0, i32 8
  %46 = load float, ptr %45, align 4
  store float %46, ptr %14, align 4
  %47 = load ptr, ptr %4, align 4
  %48 = getelementptr inbounds %struct.spinner, ptr %47, i32 0, i32 10
  %49 = load ptr, ptr %48, align 4
  %50 = getelementptr inbounds %struct.zone_t, ptr %49, i32 0, i32 53
  %51 = load i16, ptr %50, align 2
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds [2222 x %struct.pcm_t], ptr @pcms, i32 0, i32 %52
  %54 = getelementptr inbounds %struct.pcm_t, ptr %53, i32 0, i32 2
  %55 = load i32, ptr %54, align 8
  store i32 %55, ptr %15, align 4
  %56 = load ptr, ptr %4, align 4
  %57 = getelementptr inbounds %struct.spinner, ptr %56, i32 0, i32 4
  %58 = load i32, ptr %57, align 4
  %59 = load ptr, ptr %4, align 4
  %60 = getelementptr inbounds %struct.spinner, ptr %59, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = sub i32 %58, %61
  %63 = add i32 %62, 1
  store i32 %63, ptr %16, align 4
  %64 = load ptr, ptr %4, align 4
  %65 = getelementptr inbounds %struct.spinner, ptr %64, i32 0, i32 12
  %66 = load ptr, ptr %65, align 4
  %67 = getelementptr inbounds %struct.EG, ptr %66, i32 0, i32 0
  %68 = load float, ptr %67, align 4
  %69 = fcmp ogt float %68, 0.000000e+00
  br i1 %69, label %70, label %71

70:                                               ; preds = %3
  br label %88

71:                                               ; preds = %3
  %72 = load ptr, ptr %4, align 4
  %73 = getelementptr inbounds %struct.spinner, ptr %72, i32 0, i32 12
  %74 = load ptr, ptr %73, align 4
  %75 = getelementptr inbounds %struct.EG, ptr %74, i32 0, i32 0
  %76 = load float, ptr %75, align 4
  %77 = fcmp olt float %76, -9.600000e+02
  br i1 %77, label %78, label %79

78:                                               ; preds = %71
  br label %86

79:                                               ; preds = %71
  %80 = load ptr, ptr %4, align 4
  %81 = getelementptr inbounds %struct.spinner, ptr %80, i32 0, i32 12
  %82 = load ptr, ptr %81, align 4
  %83 = getelementptr inbounds %struct.EG, ptr %82, i32 0, i32 0
  %84 = load float, ptr %83, align 4
  %85 = fadd float %84, 9.600000e+02
  br label %86

86:                                               ; preds = %79, %78
  %87 = phi float [ -9.600000e+02, %78 ], [ %85, %79 ]
  br label %88

88:                                               ; preds = %86, %70
  %89 = phi float [ 0.000000e+00, %70 ], [ %87, %86 ]
  %90 = fptosi float %89 to i16
  %91 = sext i16 %90 to i32
  %92 = getelementptr inbounds [1441 x double], ptr @p10over200, i32 0, i32 %91
  %93 = load double, ptr %92, align 8
  store double %93, ptr %17, align 8
  %94 = load ptr, ptr %4, align 4
  %95 = getelementptr inbounds %struct.spinner, ptr %94, i32 0, i32 10
  %96 = load ptr, ptr %95, align 4
  %97 = getelementptr inbounds %struct.zone_t, ptr %96, i32 0, i32 54
  %98 = load i16, ptr %97, align 2
  %99 = sext i16 %98 to i32
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %109

101:                                              ; preds = %88
  %102 = load ptr, ptr %4, align 4
  %103 = getelementptr inbounds %struct.spinner, ptr %102, i32 0, i32 11
  %104 = load ptr, ptr %103, align 4
  %105 = getelementptr inbounds %struct.EG, ptr %104, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = icmp slt i32 %106, 7
  br i1 %107, label %108, label %109

108:                                              ; preds = %101
  store double 0.000000e+00, ptr %7, align 8
  store double 0.000000e+00, ptr %8, align 8
  br label %122

109:                                              ; preds = %101, %88
  %110 = load ptr, ptr %4, align 4
  %111 = getelementptr inbounds %struct.spinner, ptr %110, i32 0, i32 11
  %112 = load ptr, ptr %111, align 4
  %113 = getelementptr inbounds %struct.EG, ptr %112, i32 0, i32 0
  %114 = load float, ptr %113, align 4
  %115 = fpext float %114 to double
  store double %115, ptr %7, align 8
  %116 = load ptr, ptr %4, align 4
  %117 = getelementptr inbounds %struct.spinner, ptr %116, i32 0, i32 11
  %118 = load ptr, ptr %117, align 4
  %119 = getelementptr inbounds %struct.EG, ptr %118, i32 0, i32 1
  %120 = load float, ptr %119, align 4
  %121 = fpext float %120 to double
  store double %121, ptr %8, align 8
  br label %122

122:                                              ; preds = %109, %108
  %123 = load ptr, ptr %4, align 4
  %124 = getelementptr inbounds %struct.spinner, ptr %123, i32 0, i32 10
  %125 = load ptr, ptr %124, align 4
  %126 = getelementptr inbounds %struct.zone_t, ptr %125, i32 0, i32 54
  %127 = load i16, ptr %126, align 2
  %128 = sext i16 %127 to i32
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %134

130:                                              ; preds = %122
  %131 = load ptr, ptr %4, align 4
  %132 = getelementptr inbounds %struct.spinner, ptr %131, i32 0, i32 9
  %133 = load float, ptr %132, align 4
  br label %135

134:                                              ; preds = %122
  br label %135

135:                                              ; preds = %134, %130
  %136 = phi float [ %133, %130 ], [ 1.000000e+00, %134 ]
  store float %136, ptr %18, align 4
  %137 = load ptr, ptr %4, align 4
  %138 = getelementptr inbounds %struct.spinner, ptr %137, i32 0, i32 5
  %139 = load i32, ptr %138, align 4
  %140 = udiv i32 %139, 2
  store i32 %140, ptr %19, align 4
  %141 = load float, ptr %18, align 4
  %142 = load double, ptr %17, align 8
  %143 = load ptr, ptr %4, align 4
  %144 = getelementptr inbounds %struct.spinner, ptr %143, i32 0, i32 10
  %145 = load ptr, ptr %144, align 4
  %146 = getelementptr inbounds %struct.zone_t, ptr %145, i32 0, i32 7
  %147 = load i16, ptr %146, align 2
  %148 = sext i16 %147 to i32
  %149 = sitofp i32 %148 to double
  %150 = fmul double %142, %149
  %151 = fdiv double %150, 1.000000e+02
  %152 = fptrunc double %151 to float
  %153 = fadd float 1.200000e+01, %152
  %154 = getelementptr inbounds %struct.LFOEffects, ptr %11, i32 0, i32 1
  %155 = load float, ptr %154, align 4
  %156 = fdiv float %155, 1.000000e+02
  %157 = fadd float %153, %156
  %158 = getelementptr inbounds %struct.LFOEffects, ptr %12, i32 0, i32 1
  %159 = load float, ptr %158, align 4
  %160 = fdiv float %159, 1.000000e+02
  %161 = fadd float %157, %160
  %162 = fmul float %141, %161
  %163 = fdiv float %162, 1.200000e+01
  store float %163, ptr %18, align 4
  %164 = load ptr, ptr %4, align 4
  %165 = load i32, ptr %19, align 4
  %166 = call float @kRateAttenuate(ptr noundef %164, i32 noundef %165)
  store float %166, ptr %20, align 4
  %167 = load i32, ptr %19, align 4
  %168 = mul nsw i32 %167, 128
  %169 = add nsw i32 %168, 10
  %170 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %169
  %171 = load i8, ptr %170, align 1
  %172 = sext i8 %171 to i32
  %173 = getelementptr inbounds [128 x double], ptr @panleftLUT, i32 0, i32 %172
  %174 = load double, ptr %173, align 8
  %175 = fdiv double %174, 2.000000e+00
  store double %175, ptr %21, align 8
  %176 = load i32, ptr %19, align 4
  %177 = mul nsw i32 %176, 128
  %178 = add nsw i32 %177, 10
  %179 = getelementptr inbounds [2048 x i8], ptr @midi_cc_vals, i32 0, i32 %178
  %180 = load i8, ptr %179, align 1
  %181 = sext i8 %180 to i32
  %182 = getelementptr inbounds [128 x double], ptr @panrightLUT, i32 0, i32 %181
  %183 = load double, ptr %182, align 8
  %184 = fdiv double %183, 2.000000e+00
  store double %184, ptr %22, align 8
  store i32 0, ptr %23, align 4
  br label %185

185:                                              ; preds = %304, %135
  %186 = load i32, ptr %23, align 4
  %187 = load i32, ptr %5, align 4
  %188 = icmp slt i32 %186, %187
  br i1 %188, label %189, label %307

189:                                              ; preds = %185
  %190 = load float, ptr %14, align 4
  %191 = load float, ptr %18, align 4
  %192 = fadd float %190, %191
  store float %192, ptr %14, align 4
  br label %193

193:                                              ; preds = %196, %189
  %194 = load float, ptr %14, align 4
  %195 = fcmp oge float %194, 1.000000e+00
  br i1 %195, label %196, label %201

196:                                              ; preds = %193
  %197 = load i32, ptr %13, align 4
  %198 = add i32 %197, 1
  store i32 %198, ptr %13, align 4
  %199 = load float, ptr %14, align 4
  %200 = fsub float %199, 1.000000e+00
  store float %200, ptr %14, align 4
  br label %193, !llvm.loop !8

201:                                              ; preds = %193
  %202 = load i32, ptr %13, align 4
  %203 = load ptr, ptr %4, align 4
  %204 = getelementptr inbounds %struct.spinner, ptr %203, i32 0, i32 4
  %205 = load i32, ptr %204, align 4
  %206 = icmp uge i32 %202, %205
  br i1 %206, label %207, label %219

207:                                              ; preds = %201
  %208 = load ptr, ptr %4, align 4
  %209 = getelementptr inbounds %struct.spinner, ptr %208, i32 0, i32 10
  %210 = load ptr, ptr %209, align 4
  %211 = getelementptr inbounds %struct.zone_t, ptr %210, i32 0, i32 54
  %212 = load i16, ptr %211, align 2
  %213 = sext i16 %212 to i32
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %219

215:                                              ; preds = %207
  %216 = load i32, ptr %16, align 4
  %217 = load i32, ptr %13, align 4
  %218 = sub i32 %217, %216
  store i32 %218, ptr %13, align 4
  br label %219

219:                                              ; preds = %215, %207, %201
  %220 = load i32, ptr %13, align 4
  %221 = load i32, ptr %15, align 4
  %222 = sub i32 %221, 1
  %223 = icmp uge i32 %220, %222
  br i1 %223, label %224, label %248

224:                                              ; preds = %219
  %225 = load ptr, ptr %4, align 4
  %226 = getelementptr inbounds %struct.spinner, ptr %225, i32 0, i32 1
  %227 = load ptr, ptr %226, align 4
  %228 = load i32, ptr %23, align 4
  %229 = mul nsw i32 %228, 2
  %230 = load i32, ptr %6, align 4
  %231 = mul nsw i32 %230, 2
  %232 = add nsw i32 %229, %231
  %233 = getelementptr inbounds float, ptr %227, i32 %232
  store float 0.000000e+00, ptr %233, align 4
  %234 = load ptr, ptr %4, align 4
  %235 = getelementptr inbounds %struct.spinner, ptr %234, i32 0, i32 1
  %236 = load ptr, ptr %235, align 4
  %237 = load i32, ptr %23, align 4
  %238 = mul nsw i32 %237, 2
  %239 = load i32, ptr %6, align 4
  %240 = mul nsw i32 %239, 2
  %241 = add nsw i32 %238, %240
  %242 = add nsw i32 %241, 1
  %243 = getelementptr inbounds float, ptr %236, i32 %242
  store float 0.000000e+00, ptr %243, align 4
  %244 = load ptr, ptr %4, align 4
  %245 = getelementptr inbounds %struct.spinner, ptr %244, i32 0, i32 11
  %246 = load ptr, ptr %245, align 4
  %247 = getelementptr inbounds %struct.EG, ptr %246, i32 0, i32 3
  store i32 99, ptr %247, align 4
  br label %248

248:                                              ; preds = %224, %219
  %249 = load ptr, ptr %4, align 4
  %250 = getelementptr inbounds %struct.spinner, ptr %249, i32 0, i32 0
  %251 = load ptr, ptr %250, align 4
  %252 = load i32, ptr %13, align 4
  %253 = getelementptr inbounds float, ptr %251, i32 %252
  %254 = load float, ptr %253, align 4
  %255 = load ptr, ptr %4, align 4
  %256 = getelementptr inbounds %struct.spinner, ptr %255, i32 0, i32 0
  %257 = load ptr, ptr %256, align 4
  %258 = load i32, ptr %13, align 4
  %259 = add i32 %258, 1
  %260 = getelementptr inbounds float, ptr %257, i32 %259
  %261 = load float, ptr %260, align 4
  %262 = load float, ptr %14, align 4
  %263 = call float @lerp(float noundef %254, float noundef %261, float noundef %262)
  store float %263, ptr %24, align 4
  %264 = load float, ptr %24, align 4
  %265 = load double, ptr %7, align 8
  %266 = load float, ptr %20, align 4
  %267 = fpext float %266 to double
  %268 = fadd double %265, %267
  %269 = load double, ptr %21, align 8
  %270 = fadd double %268, %269
  %271 = fptosi double %270 to i16
  %272 = call float @applyCentible(float noundef %264, i16 noundef signext %271)
  %273 = load ptr, ptr %4, align 4
  %274 = getelementptr inbounds %struct.spinner, ptr %273, i32 0, i32 1
  %275 = load ptr, ptr %274, align 4
  %276 = load i32, ptr %23, align 4
  %277 = mul nsw i32 %276, 2
  %278 = load i32, ptr %6, align 4
  %279 = mul nsw i32 %278, 2
  %280 = add nsw i32 %277, %279
  %281 = getelementptr inbounds float, ptr %275, i32 %280
  store float %272, ptr %281, align 4
  %282 = load float, ptr %24, align 4
  %283 = load double, ptr %7, align 8
  %284 = load float, ptr %20, align 4
  %285 = fpext float %284 to double
  %286 = fadd double %283, %285
  %287 = load double, ptr %22, align 8
  %288 = fadd double %286, %287
  %289 = fptosi double %288 to i16
  %290 = call float @applyCentible(float noundef %282, i16 noundef signext %289)
  %291 = load ptr, ptr %4, align 4
  %292 = getelementptr inbounds %struct.spinner, ptr %291, i32 0, i32 1
  %293 = load ptr, ptr %292, align 4
  %294 = load i32, ptr %23, align 4
  %295 = mul nsw i32 %294, 2
  %296 = load i32, ptr %6, align 4
  %297 = mul nsw i32 %296, 2
  %298 = add nsw i32 %295, %297
  %299 = add nsw i32 %298, 1
  %300 = getelementptr inbounds float, ptr %293, i32 %299
  store float %290, ptr %300, align 4
  %301 = load double, ptr %8, align 8
  %302 = load double, ptr %7, align 8
  %303 = fadd double %302, %301
  store double %303, ptr %7, align 8
  br label %304

304:                                              ; preds = %248
  %305 = load i32, ptr %23, align 4
  %306 = add nsw i32 %305, 1
  store i32 %306, ptr %23, align 4
  br label %185, !llvm.loop !9

307:                                              ; preds = %185
  %308 = load i32, ptr %13, align 4
  %309 = load ptr, ptr %4, align 4
  %310 = getelementptr inbounds %struct.spinner, ptr %309, i32 0, i32 2
  store i32 %308, ptr %310, align 4
  %311 = load float, ptr %14, align 4
  %312 = load ptr, ptr %4, align 4
  %313 = getelementptr inbounds %struct.spinner, ptr %312, i32 0, i32 8
  store float %311, ptr %313, align 4
  %314 = load float, ptr %18, align 4
  %315 = load ptr, ptr %4, align 4
  %316 = getelementptr inbounds %struct.spinner, ptr %315, i32 0, i32 9
  store float %314, ptr %316, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @spin(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 4
  %4 = alloca i32, align 4
  store ptr %0, ptr %3, align 4
  store i32 %1, ptr %4, align 4
  %5 = load ptr, ptr %3, align 4
  %6 = getelementptr inbounds %struct.spinner, ptr %5, i32 0, i32 11
  %7 = load ptr, ptr %6, align 4
  %8 = call float @update_eg(ptr noundef %7, i32 noundef 64)
  %9 = load ptr, ptr %3, align 4
  %10 = getelementptr inbounds %struct.spinner, ptr %9, i32 0, i32 12
  %11 = load ptr, ptr %10, align 4
  %12 = call float @update_eg(ptr noundef %11, i32 noundef 64)
  %13 = load ptr, ptr %3, align 4
  call void @_spinblock(ptr noundef %13, i32 noundef 64, i32 noundef 0)
  %14 = load ptr, ptr %3, align 4
  %15 = getelementptr inbounds %struct.spinner, ptr %14, i32 0, i32 11
  %16 = load ptr, ptr %15, align 4
  %17 = call float @update_eg(ptr noundef %16, i32 noundef 64)
  %18 = load ptr, ptr %3, align 4
  %19 = getelementptr inbounds %struct.spinner, ptr %18, i32 0, i32 12
  %20 = load ptr, ptr %19, align 4
  %21 = call float @update_eg(ptr noundef %20, i32 noundef 64)
  %22 = load ptr, ptr %3, align 4
  call void @_spinblock(ptr noundef %22, i32 noundef 64, i32 noundef 64)
  %23 = load ptr, ptr %3, align 4
  %24 = getelementptr inbounds %struct.spinner, ptr %23, i32 0, i32 11
  %25 = load ptr, ptr %24, align 4
  %26 = getelementptr inbounds %struct.EG, ptr %25, i32 0, i32 1
  %27 = load float, ptr %26, align 4
  %28 = fpext float %27 to double
  %29 = fadd double %28, 1.000000e-03
  %30 = fptosi double %29 to i32
  ret i32 %30
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Homebrew clang version 15.0.7"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
